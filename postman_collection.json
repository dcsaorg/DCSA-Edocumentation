{
	"info": {
		"_postman_id": "00664fb0-efb6-42f3-a6ec-8f3e536db655",
		"name": "DCSA-EDocumentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10391075",
		"_collection_link": "https://grey-desert-2866.postman.co/workspace/New-Team-Workspace~9634308f-0889-42d7-99bd-1d4b0f653244/collection/10391075-00664fb0-efb6-42f3-a6ec-8f3e536db655?action=share&source=collection_link&creator=10391075"
	},
	"item": [
		{
			"name": "Booking request summaries",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Booking request summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Body contains 5 or more items', () => {\r",
											"    pm.expect(pm.response.json().length).to.greaterThan(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/booking-summaries",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"booking-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking request summaries CMPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('All matches must have correct status', () => {\r",
											"    const response = pm.response.json()\r",
											"    for (let i = 0; i < response.length ; i++) {\r",
											"        pm.expect(response[i].documentStatus).to.equal(\"CMPL\");\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/booking-summaries?documentStatus=CMPL",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"booking-summaries"
									],
									"query": [
										{
											"key": "documentStatus",
											"value": "CMPL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking request status per documentStatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let documentStatusses = pm.collectionVariables.get(\"DOCUMENT_STATUSSES\");\r",
											"\r",
											"if(!documentStatusses || documentStatusses.length == 0) {\r",
											"    console.log(\"retrieving all known document statusses currently available\")\r",
											"    let baseURL = pm.collectionVariables.get(\"BASE_URL\");\r",
											"    let contextPath = pm.collectionVariables.get(\"BKG_CONTEXT_PATH\");\r",
											"    pm.sendRequest(baseURL+contextPath+\"/booking-summaries\", (err, response) => {\r",
											"        const seen = new Set();\r",
											"        const documentStatusses = response.json()\r",
											"            .map(({documentStatus}) => documentStatus)\r",
											"            .filter(documentStatus => {\r",
											"               const alreadySeen = !seen.has(documentStatus);\r",
											"               seen.add(documentStatus);\r",
											"               return alreadySeen;\r",
											"        });\r",
											"        pm.collectionVariables.set(\"DOCUMENT_STATUSSES\", documentStatusses);\r",
											"    });\r",
											"} else {\r",
											"    let currentDocumentStatus = documentStatusses.shift();\r",
											"    pm.request.url.query.add(\"documentStatus=\" + currentDocumentStatus);\r",
											"    pm.collectionVariables.set(\"DOCUMENT_STATUSSES\", documentStatusses);\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const documentStatusses = pm.collectionVariables.get(\"DOCUMENT_STATUSSES\");\r",
											"\r",
											"if (documentStatusses && documentStatusses.length > 0){\r",
											"    postman.setNextRequest(\"Booking request status per documentStatus\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Booking request summaries sort\");\r",
											"    pm.collectionVariables.unset(\"DOCUMENT_STATUSSES\");\r",
											"}\r",
											"\r",
											"let documentStatusUnderTest = pm.request.url.query.get(\"documentStatus\");\r",
											"\r",
											"if(documentStatusUnderTest) {\r",
											"    pm.test(\"documentStatus should be \" + documentStatusUnderTest, () => {\r",
											"        let documentStatusses = pm.response.json().map(({documentStatus}) => documentStatus);\r",
											"        pm.expect(documentStatusses.every(v => v === documentStatusUnderTest)).to.eql(true);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/booking-summaries",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"booking-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking request summaries sort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"First datetime is smaller then last date time when sorting on dateTime Ascending\", () => {\r",
											"    let bookingRequestUpdatedDateTimes =  pm.response.json().map(({bookingRequestUpdatedDateTime}) => bookingRequestUpdatedDateTime);\r",
											"    let firstTime = new Date(bookingRequestUpdatedDateTimes[0]);\r",
											"    let lastTime = new Date(bookingRequestUpdatedDateTimes[bookingRequestUpdatedDateTimes.length - 1]);\r",
											"    pm.expect(firstTime.getTime()).to.be.lessThan(lastTime.getTime());\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/booking-summaries?sort=bookingRequestUpdatedDateTime:ASC",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"booking-summaries"
									],
									"query": [
										{
											"key": "sort",
											"value": "bookingRequestUpdatedDateTime:ASC"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"BOOKING_SUMMARY_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Booking request summaries Invalid documentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidParameter\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidParameter\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'documentStatus' must be of type BkgDocumentStatus\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/booking-summaries?documentStatus=null",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"booking-summaries"
									],
									"query": [
										{
											"key": "documentStatus",
											"value": "null"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									""
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can request a list of their requested bookings.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"BKG_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Shipping instruction summaries",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Shipping instruction summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Body contains 5 or more items', () => {\r",
											"    pm.expect(pm.response.json().length).to.greaterThan(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipping instructions summaries CMPL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Body contains 0 or more items', () => {\r",
											"    pm.expect(pm.response.json().length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries?documentStatus=VOID",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									],
									"query": [
										{
											"key": "documentStatus",
											"value": "VOID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipping instruction summaries per documentStatus",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let documentStatusses = pm.collectionVariables.get(\"DOCUMENT_STATUSSES\");\r",
											"\r",
											"if(!documentStatusses || documentStatusses.length == 0) {\r",
											"    console.log(\"retrieving all known document statusses currently available\")\r",
											"    let baseURL = pm.collectionVariables.get(\"BASE_URL\");\r",
											"    let contextPath = pm.collectionVariables.get(\"EBL_CONTEXT_PATH\");\r",
											"    pm.sendRequest(baseURL+contextPath+\"/shipping-instructions-summaries\",function(err, response){\r",
											"        let documentStatusses = response.json().map(({documentStatus}) => documentStatus);\r",
											"        pm.collectionVariables.set(\"DOCUMENT_STATUSSES\", documentStatusses);\r",
											"    });\r",
											"} else {\r",
											"    let currentDocumentStatus = documentStatusses.shift();\r",
											"    pm.request.url.query.add(\"documentStatus=\" + currentDocumentStatus);\r",
											"    pm.collectionVariables.set(\"DOCUMENT_STATUSSES\", documentStatusses);\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const documentStatusses = pm.collectionVariables.get(\"DOCUMENT_STATUSSES\");\r",
											"\r",
											"if (documentStatusses && documentStatusses.length > 0){\r",
											"    postman.setNextRequest(\"Shipping instruction summaries per documentStatus\");\r",
											"} else {\r",
											"    postman.setNextRequest(\"Shipping instruction for carrierBookingReference\");\r",
											"    pm.collectionVariables.unset(\"DOCUMENT_STATUSSES\");\r",
											"}\r",
											"\r",
											"let documentStatusUnderTest = pm.request.url.query.get(\"documentStatus\");\r",
											"\r",
											"if(documentStatusUnderTest) {\r",
											"    pm.test(\"documentStatus should be \" + documentStatusUnderTest, () => {\r",
											"        let documentStatusses = pm.response.json().map(({documentStatus}) => documentStatus);\r",
											"        pm.expect(documentStatusses.every(v => v === documentStatusUnderTest)).to.eql(true);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipping instruction for carrierBookingReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains only 1 summary\", () => {\r",
											"    pm.expect(jsonResponse.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Carrier booking reference matches filter request\", () => {\r",
											"    pm.expect(jsonResponse[0].carrierBookingReferences.includes(\"D659FDB7E33C\")).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries?carrierBookingReference=D659FDB7E33C",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									],
									"query": [
										{
											"key": "carrierBookingReference",
											"value": "D659FDB7E33C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipping instruction for unknown carrierBookingReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains only 0 summaries\", () => {\r",
											"    pm.expect(jsonResponse.length).to.eql(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries?carrierBookingReference=unkown",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									],
									"query": [
										{
											"key": "carrierBookingReference",
											"value": "unkown"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipping instruction for multiple carrierBookingReferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains at least 1 summary\", () => {\r",
											"    pm.expect(jsonResponse.length).to.gte(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Carrier booking reference matches filter request\", () => {\r",
											"    // FIXME: Swagger is unclear here; RI does OR, so the test match that until the swagger gets clarified\r",
											"    for (const summary of jsonResponse) {\r",
											"        const carrierBookingReferences = summary.carrierBookingReferences;\r",
											"        pm.expect(carrierBookingReferences.includes(\"E379021B7782\") || carrierBookingReferences.includes(\"A379021B7782\")).to.eql(true);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries?carrierBookingReference=E379021B7782,A379021B7782",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									],
									"query": [
										{
											"key": "carrierBookingReference",
											"value": "E379021B7782,A379021B7782"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"SHIPPING_INSTRUCTIONS_SUMMARY_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Shipping instruction summaries invalid document status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidParameter\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidParameter\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"'documentStatus' must be of type EblDocumentStatus\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions-summaries?documentStatus=INVALID",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions-summaries"
									],
									"query": [
										{
											"key": "documentStatus",
											"value": "INVALID"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									""
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can request a list of their shipping instructions or transport document amendment requests.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"EBL_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "GET Booking request",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Booking by carrierBookingRequestReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains carrier provided fields\", () => {\r",
											"    let carrierBookingRequestReferenceUnderTest = pm.request.url.path[3];\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReferenceUnderTest);\r",
											"    pm.expect(jsonData.documentStatus).to.exist;\r",
											"    pm.expect(jsonData.bookingRequestCreatedDateTime).to.exist;\r",
											"    pm.expect(jsonData.bookingRequestUpdatedDateTime).to.exist;\r",
											"    pm.expect(jsonData.invoicePayableAt).to.exist;\r",
											"    pm.expect(jsonData.requestedEquipments).to.exist;\r",
											"    pm.expect(jsonData.shipmentLocations).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/CARRIER_BOOKING_REQUEST_REFERENCE_01",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"CARRIER_BOOKING_REQUEST_REFERENCE_01"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"BOOKING_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Booking by carrierBookingRequestRereference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidInput\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"getBooking.carrierBookingRequestReference size must be between 0 and 100\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No booking found with carrierBookingRequestReference: IdoNotExist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/IdoNotExist",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"IdoNotExist"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can request the full details of one of their booking requests.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"BKG_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "GET ShippingInstruction",
			"item": [
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "ShippingInstruction by shippingInstructionReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidInput\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"getShippingInstructionByReference.shippingInstructionReference size must be between 0 and 100\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions/12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions",
										"12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739"
									]
								}
							},
							"response": []
						},
						{
							"name": "ShippingInstruction not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No shipping instruction found with shippingInstructionReference: IdoNotExist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions/IdoNotExist",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions",
										"IdoNotExist"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can request the full details of one of their shipping instruction or one of their transport document amendment requests.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"EBL_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Cancel booking",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Test: Cancel newly created booking",
							"item": [
								{
									"name": "Create a booking to be canceled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-11\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292578512+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel the new booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"\r",
													"pm.collectionVariables.unset(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus must be CANC\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"CANC\");\r",
													"});\r",
													"\r",
													"pm.test(\"carrierBookingRequestReference must be as expected\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"documentStatus\": \"CANC\",\r\n    \"reason\": \"We decided to book else where\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"// We do not valid return codes here because create booking is a 201 and cancel is a 200.",
									"// (which we could probably do a generic check for here, but we would still need a more",
									"// precise check in the individual tests anyway).",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Test: Cancel twice should fail",
							"item": [
								{
									"name": "Create a booking to be canceled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-11\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationType\": \"UNLO\",\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292578512+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel Booking first time",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus must be CANC\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"CANC\");\r",
													"});\r",
													"\r",
													"pm.test(\"carrierBookingRequestReference must be as expected\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"documentStatus\": \"CANC\",\r\n    \"reason\": \"We decided to book else where\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel Booking not found Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.unset(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is conflict\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"conflict\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is as expected\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"Cannot perform the requested action on the booking because the booking is cancelled (CANC)\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"documentStatus\": \"CANC\",\r\n    \"reason\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Cancel Booking not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is as expected\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No booking found with carrierBookingRequestReference: IdoNotExist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"documentStatus\": \"CANC\",\r\n    \"reason\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/IdoNotExist",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"IdoNotExist"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Booking invalid documentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is documentStatus\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"documentStatus\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is as expected\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"must be any of [CANC]\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"documentStatus\": \"CONF\",\r\n    \"reason\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/DoesNotMatter",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"DoesNotMatter"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can cancel a booking request.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification."
		},
		{
			"name": "Post booking",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Test: Post a booking and validate",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ],\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\": true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            }\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\",\r\n                        \"email\": \"henrik@gmail.com\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Waltershofer Hafen/S\",\r\n                \"locationType\": \"FACI\",\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"facilityCode\": \"EGH\",\r\n                \"facilityCodeListProvider\": \"SMDG\"\r\n            },\r\n            \r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"     const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Test: Post booking with dates in the past",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2022-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2022-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2022-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Asseco DK office\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"OIR\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.unset(\"POST_BODY\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with missing POD and PDE.",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22RT\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\":true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            },\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Asseco DK office\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n                {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DKCPH\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T14:34:41.99631016+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const postRequestBodyRaw = pm.collectionVariables.get(\"POST_BODY\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.unset(\"POST_BODY\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Reason: POD or PED not found in shipment locations\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const requestedChanges = jsonData.requestedChanges ?? [];\r",
													"    const relevantRequestedChange = requestedChanges.find(v => v.path === \"shipmentLocations\") ?? null;\r",
													"    pm.expect(relevantRequestedChange).to.be.not.null;\r",
													"    pm.expect(relevantRequestedChange.message).to.eq(\"No ShipmentLocationTypeCode of POD or PDE found in the shipmentLocations. At least one of them should be provided.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with duplicate address",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22RT\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\":true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            },\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Asseco DK office\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Asseco DK office\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Reason: Duplicate addresses in shipment locations\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const requestedChanges = jsonData.requestedChanges ?? [];\r",
													"    const relevantRequestedChange = requestedChanges.find(v => v.path === \"shipmentLocations\") ?? null;\r",
													"    pm.expect(relevantRequestedChange).to.be.not.null;\r",
													"    pm.expect(relevantRequestedChange.message).to.eq(\"Duplicate addresses found in shipmentLocations\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with duplicate UNLocationCodes",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22RT\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\":true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            },\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Reason: Duplicate UNLocationCodes in shipment locations\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"        const requestedChanges = jsonData.requestedChanges ?? [];\r",
													"    const relevantRequestedChange = requestedChanges.find(v => v.path === \"shipmentLocations\") ?? null;\r",
													"    pm.expect(relevantRequestedChange).to.be.not.null;\r",
													"    pm.expect(relevantRequestedChange.message).to.eq(\"Duplicate UNLocationCodes found in shipmentLocations\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with invalid party function code",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22RT\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\":true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            },\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"INV\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // Posting a new booking should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"requestedChanges should contain partyFunction as problem\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    const requestedChanges = jsonData.requestedChanges ?? [];\r",
													"    const relevantRequestedChange = requestedChanges.find(v => v.path === \"documentParties[].partyFunction\") ?? null;\r",
													"    pm.expect(relevantRequestedChange).to.be.not.null;\r",
													"    pm.expect(relevantRequestedChange.message).to.eq(\"The value should have been one of: OS, CN, COW, COX, MS, N1, N2, NI, DDR, DDS, HE, SCO, BA, END\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with invalid party contact details",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalid PartyContactDetails\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"documentParties[0].party.partyContactDetails[0]\");\r",
													"});\r",
													"\r",
													"pm.test(\"PartyContactDetails must contain either phone or email\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"at least 1 of [phone, email] must be non-null\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22RT\",\r\n            \"units\": 3.0,\r\n            \"isShipperOwned\": false,\r\n            \"activeReeferSettings\": {\r\n                \"isGeneratorSetRequired\": true,\r\n                \"isPreCoolingRequired\": true,\r\n                \"isColdTreatmentRequired\": true,\r\n                \"isVentilationOpen\": true,\r\n                \"isControlledAtmosphereRequired\":true,\r\n                \"isDrainholesOpen\": true,\r\n                \"isBulbMode\": true,\r\n                \"temperatureSetpoint\": -17,\r\n                \"temperatureUnit\": \"CEL\",\r\n                \"o2Setpoint\": 12,\r\n                \"co2Setpoint\": 13,\r\n                \"humiditySetpoint\": 14,\r\n                \"airExchangeSetpoint\": 25,\r\n                \"airExchangeUnit\": \"MQH\"\r\n            },\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"INV\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with invalid OuterPackaging packageCode",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalid packageCode\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"requestedEquipments[0].commodities[0].outerPackaging.packageCode\");\r",
													"});\r",
													"\r",
													"pm.test(\"must match regex pattern\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"must match \\\"^[A-Z0-9]{2}$\\\"\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22G1\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1AAA\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with invalid OuterPackaging imoPackageCode",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalid packageCode\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"requestedEquipments[0].commodities[0].outerPackaging.imoPackagingCode\");\r",
													"});\r",
													"\r",
													"pm.test(\"must match regex pattern\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"must match \\\"^[A-Z0-9]{1,5}$\\\"\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22G1\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A121122\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Test: Post booking with invalid OuterPackaging numberOfPackages",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalid packageCode\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"requestedEquipments[0].commodities[0].outerPackaging.numberOfPackages\");\r",
													"});\r",
													"\r",
													"pm.test(\"must be greater than 0\", () => {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"must be greater than or equal to 1\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22G1\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 0,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can create a new booking request.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Helper functions",
							"function isObject(v) {",
							"    return '[object Object]' === Object.prototype.toString.call(v);",
							"};",
							"",
							"// Helper functions for sorting deep json for comparison - This function is used with deep equal comp as order of list fails comparison",
							"JSON.sort = function(o) {",
							"if (Array.isArray(o)) {",
							"        return o.sort().map(JSON.sort);",
							"    } else if (isObject(o)) {",
							"        return Object",
							"            .keys(o)",
							"        .sort()",
							"            .reduce(function(a, k) {",
							"                a[k] = JSON.sort(o[k]);",
							"",
							"                return a;",
							"            }, {});",
							"    }",
							"",
							"    return o;",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Put booking",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Test: Put a newly created booking",
							"item": [
								{
									"name": "Create a booking to be updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-11\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [],\r\n    \"shipmentLocations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Use PUT to update the booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus must be PENC\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"PENC\");\r",
													"});\r",
													"\r",
													"pm.test(\"carrierBookingRequestReference must be as expected\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\": \"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"More details\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"More precise commodity type\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify updated carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"BOOKING_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.unset(\"PUT_BODY\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingRequestReference).to.eql(carrierBookingRequestReference);\r",
													"\r",
													"    // We updated the booking to have 2022-11-13 instead of 2022-11-11\r",
													"    pm.expect(jsonData.expectedDepartureDate).to.eql(\"2022-11-13\");\r",
													"    // The update should put us in \"PENC\" (at least at the time of\r",
													"    // writing the test - the alternative being PENU).\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"PENC\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Test: Invalid PUT of existing booking",
							"item": [
								{
									"name": "Create a booking to be updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-11\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [],\r\n    \"shipmentLocations\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to abuse PUT to set documentStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalidInput\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message mentions documentStatus as an issue\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.includes(\"documentStatus\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\": \"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"documentStatus\": \"CONF\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"CR\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"equipmentReferences\": [\r\n                     \"BMOU2149612\"\r\n            ],\r\n            \"isShipperOwned\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to abuse PUT to set bookingRequestCreatedDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalidInput\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message mentions bookingRequestCreatedDateTime as an issue\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.includes(\"bookingRequestCreatedDateTime\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\": \"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"bookingRequestCreatedDateTime\": \"2022-11-11T11:09:28.292579+01:00\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"CR\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"sizeType\": \"22GP\",\r\n            \"units\": 1,\r\n            \"equipmentReferences\": [\r\n                \"BMOU2149612\"\r\n            ],\r\n            \"isShipperOwned\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attempt to abuse PUT to set bookingRequestUpdateDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalidInput\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message mentions bookingRequestUpdateDateTime as an issue\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.includes(\"bookingRequestUpdateDateTime\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\": \"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"bookingRequestUpdateDateTime\": \"2022-11-11T11:09:28.292579+01:00\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"commodities\": [\r\n        {\r\n            \"commodityType\": \"blah blah blah\",\r\n            \"cargoGrossWeight\": 3.14,\r\n            \"cargoGrossWeightUnit\": \"KGM\"\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid carrierBookingRequestReference in PUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.collectionVariables.unset(\"CARRIER_BOOKING_REQUEST_REFERENCE\")\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Error reason is invalidInput\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message mentions carrierBookingRequestReference as an issue\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.eql(\"carrierBookingRequestReference must match bookingRequest.carrierBookingRequestReference\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.expect(pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\")).to.not.eql(undefined)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\": \"another reference\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder is one test case that requires multiple API requests to complete."
						},
						{
							"name": "Attempt PUT non-existing booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");\r",
											"const schemaObject = JSON.parse(schema);\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', () => {\r",
											"    pm.response.to.have.jsonSchema(schemaObject);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message mentions documentStatus as an issue\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No booking found with carrierBookingRequestReference: IdoNotExist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"carrierBookingRequestReference\": \"IdoNotExist\",\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"BB\",\r\n    \"cargoMovementTypeAtDestination\": \"BB\",\r\n    \"serviceContractReference\": \"asdas\",\r\n    \"isPartialLoadAllowed\": false,\r\n    \"isExportDeclarationRequired\": false,\r\n    \"isImportLicenseRequired\": false,\r\n    \"isAMSACIFilingRequired\": false,\r\n    \"isDestinationFilingRequired\": false,\r\n    \"expectedDepartureDate\": \"2022-11-13\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": false,\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"address location\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Henrik\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"UNLocationCode\": \"DEHAM\",\r\n        \"locationType\": \"UNLO\",\r\n        \"locationName\": \"unlocation location\"\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"commodityType\": \"blah blah blah\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                },\r\n                {\r\n                    \"commodityType\": \"blip blip blip\",\r\n                    \"cargoGrossWeight\": 3.14,\r\n                    \"cargoGrossWeightUnit\": \"KGM\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"SI\",\r\n            \"value\": \"boink\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"address location\",\r\n                \"locationType\": \"ADDR\",\r\n                \"address\": {\r\n                    \"name\": \"Henrik\"\r\n                }\r\n            },\r\n            \"shipmentLocationTypeCode\": \"ECP\",\r\n            \"eventDateTime\": \"2022-11-11T11:09:28.292579+01:00\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/IdoNotExist",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"bookings",
										"IdoNotExist"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can update/amend the bookings by updating the booking request related to the booking.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification."
		},
		{
			"name": "Post Shipping instruction",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Create Shipping instruction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const parsedBody = pm.response.json();\r",
											"pm.collectionVariables.set(\"SHIPPING_INSTRUCTION_REFERENCE\", parsedBody.shippingInstructionReference);\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"documentStatus is RECE\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isShippedOnBoardType\": true,\r\n    \"isElectronic\": true,\r\n    \"isToOrder\": true,\r\n    \"displayedNameForPortOfLoad\": [\r\n            \"Port of Rotterdam\"\r\n        ],\r\n    \"customsReferences\": [\r\n        {\r\n            \"type\": \"CERS\",\r\n            \"countryCode\": \"CA\",\r\n            \"value\": \"12345678\"\r\n        }\r\n    ],\r\n    \"consignmentItems\": [\r\n        {\r\n            \"HSCodes\": [\"411510\"],\r\n            \"carrierBookingReference\": \"A379021B7782\",\r\n            \"commoditySubreference\": \"unknown-commodity-subreference\",\r\n            \"weight\": 120.4,\r\n            \"weightUnit\": \"KGM\",\r\n            \"descriptionOfGoods\": \"description\",\r\n            \"cargoItems\": [\r\n                {\r\n                    \"equipmentReference\": \"BMOU2149612\",\r\n                    \"weight\": 120.3,\r\n                    \"weightUnit\": \"KGM\",\r\n                    \"shippingMarks\": [\"bar\"]\r\n                }\r\n            ],\r\n            \"customsReferences\": [\r\n                {\r\n                    \"type\": \"CERS\",\r\n                    \"countryCode\": \"CA\",\r\n                    \"value\": \"12345678\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"utilizedTransportEquipments\": [\r\n        {\r\n            \"equipmentReference\": \"BMOU2149612\",\r\n            \"cargoGrossWeight\": 120.3,\r\n            \"cargoGrossWeightUnit\": \"KGM\",\r\n            \"isShipperOwned\": false,\r\n            \"seals\": [\r\n                {\r\n                    \"number\": \"12345\",\r\n                    \"source\": \"CAR\",\r\n                    \"type\": \"BLT\"\r\n                },\r\n                {\r\n                    \"number\": \"98765\",\r\n                    \"source\": \"RACxx\",\r\n                    \"type\": \"TLBxx\"\r\n                }\r\n            ],\r\n            \"customsReferences\": [\r\n                {\r\n                    \"type\": \"CERS\",\r\n                    \"countryCode\": \"CA\",\r\n                    \"value\": \"12345678\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"foo party\",\r\n                \"address\": {\r\n                    \"name\": \"foo address name\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"partycontact details\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"CN\",\r\n            \"displayedAddress\": [\r\n                \"foo\"\r\n            ],\r\n            \"isToBeNotified\": false\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"foo reference\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify saved shipping instruction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const shippingInstructionReference = pm.collectionVariables.get(\"SHIPPING_INSTRUCTION_REFERENCE\");\r",
											"\r",
											"pm.collectionVariables.unset(\"SHIPPING_INSTRUCTION_REFERENCE\");\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains updated values\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.shippingInstructionReference).to.eql(shippingInstructionReference);\r",
											"\r",
											"    // Posting a new bookign should put us in \"RECE\".\r",
											"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions/{{SHIPPING_INSTRUCTION_REFERENCE}}",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions",
										"{{SHIPPING_INSTRUCTION_REFERENCE}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"SHIPPING_INSTRUCTION_RESPONSE_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"// We do not valid return codes here because create booking is a 201 and cancel is a 200.",
									"// (which we could probably do a generic check for here, but we would still need a more",
									"// precise check in the individual tests anyway).",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Create Shipping instruction invalid utilizedTransportEquipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidInput\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.contain(\"utilizedTransportEquipments\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"must be a valid UtilizedTransportEquipment\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isShippedOnBoardType\": true,\r\n    \"isElectronic\": true,\r\n    \"isToOrder\": true,\r\n    \"consignmentItems\": [\r\n        {\r\n            \"HSCodes\": [\"411510\"],\r\n            \"carrierBookingReference\": \"cbr-b83765166707812c8ff4\",\r\n            \"commoditySubreference\": \"unknown-commodity-subreference\",\r\n            \"weight\": 120.4,\r\n            \"weightUnit\": \"KGM\",\r\n            \"descriptionOfGoods\": \"description\",\r\n            \"cargoItems\": [\r\n                {\r\n                    \"equipmentReference\": \"BMOU2149612\",\r\n                    \"weight\": 120.3,\r\n                    \"weightUnit\": \"KGM\",\r\n                    \"shippingMarks\": [\"bar\"]\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"utilizedTransportEquipments\": [\r\n        {\r\n            \"equipment\": {\r\n                \"equipmentReference\": \"BMOU2149612\"\r\n            },\r\n            \"cargoGrossWeight\": 120.3,\r\n            \"cargoGrossWeightUnit\": \"KGM\",\r\n            \"isShipperOwned\": true,\r\n            \"seals\": [\r\n                {\r\n                    \"number\": \"12345\",\r\n                    \"source\": \"CAR\",\r\n                    \"type\": \"BLT\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"foo party\",\r\n                \"address\": {\r\n                    \"name\": \"foo address name\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"partycontact details\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"CN\",\r\n            \"displayedAddress\": [\r\n                \"foo\"\r\n            ],\r\n            \"isToBeNotified\": false\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"foo reference\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Shipping instruction invalid no consignmentItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidInput\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.contain(\"consignmentItems\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"consignmentItems are required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"isShippedOnBoardType\": true,\r\n    \"isElectronic\": true,\r\n    \"isToOrder\": true,\r\n    \"utilizedTransportEquipments\": [\r\n        {\r\n            \"equipmentReference\": \"BMOU2149612\",\r\n            \"cargoGrossWeight\": 120.3,\r\n            \"cargoGrossWeightUnit\": \"KGM\",\r\n            \"isShipperOwned\": false,\r\n            \"seals\": [\r\n                {\r\n                    \"number\": \"12345\",\r\n                    \"source\": \"CAR\",\r\n                    \"type\": \"BLT\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"foo party\",\r\n                \"address\": {\r\n                    \"name\": \"foo address name\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"partycontact details\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"CN\",\r\n            \"displayedAddress\": [\r\n                \"foo\"\r\n            ],\r\n            \"isToBeNotified\": false\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"foo reference\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"shipping-instructions"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can create a new shipping instruction.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification."
		},
		{
			"name": "Get Shipment",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "Shipment by carrierBookingReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response contains mandatory parent fields\", () => {\r",
											"    let carrierBookingReferenceUnderTest = pm.request.url.path[3];\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.carrierBookingReference).to.eql(carrierBookingReferenceUnderTest);\r",
											"    pm.expect(jsonData.shipmentCreatedDateTime, \"shipmentCreatedDateTime\").to.exist;\r",
											"    pm.expect(jsonData.booking, \"booking\").to.exist;\r",
											"    pm.expect(jsonData.transports, \"transports\").to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/shipments/BR1239719871",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"shipments",
										"BR1239719871"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"SHIPMENT_RESPONSE_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Shipment by carrierBookingReference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is invalidInput\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"invalidInput\");\r",
											"});\r",
											"\r",
											"pm.test(\"carrierBookingReference size must be between 0 and 35\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"getShipment.carrierBookingReference size must be between 0 and 35\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/shipments/12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"shipments",
										"12342394023i49023894i239054345u34593859438534905890438659034582390842390489023758937589347584356765049234823908490237489237482937589347859023745238905743248954739"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipment not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"No Shipment found\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No Shipment found with carrierBookingReference = IdoNotExist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/shipments/IdoNotExist",
									"host": [
										"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
									],
									"path": [
										"shipments",
										"IdoNotExist"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can get the full details of their confirmed bookings (shipments).\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"BKG_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Get TransportDocument",
			"item": [
				{
					"name": "Positive test cases",
					"item": [
						{
							"name": "TransportDocument by transportdocument reference",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/transport-documents/9b02401c-b2fb-5009",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"transport-documents",
										"9b02401c-b2fb-5009"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"TRANSPORT_DOCUMENT_RESPONSE_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "TransportDocument by transportdocument reference Not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error reason is notFound\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].reason).to.eql(\"notFound\");\r",
											"});\r",
											"\r",
											"pm.test(\"DocumentStatus must contain a valid value\", () => {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].message).to.eql(\"No transport document found with transportDocumentReference: id-do-not-exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/transport-documents/id-do-not-exist",
									"host": [
										"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
									],
									"path": [
										"transport-documents",
										"id-do-not-exist"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schema = pm.collectionVariables.get(\"ERROR_SCHEMA\");",
									"const schemaObject = JSON.parse(schema);",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.response.to.have.jsonSchema(schemaObject);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "The tests in this folder is about testing that the shipper (or their delegate) can request the details of a transport document.\n\nThe positive tests are about features that should be possible according the API specification.\n\nThe negative tests are about features that should not be possible according to the API specification.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"API-Version is present\", () => {",
							"    pm.response.to.have.header(\"API-Version\");",
							"});",
							"",
							"pm.test(\"API-Version header is set correctly\", () => {",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get(\"EBL_SPEC_VERSION\"));",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "POST Shipment",
			"item": [
				{
					"name": "Negative test cases",
					"item": [
						{
							"name": "Test: Post Shipment with NOT connected transport Plans",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw)\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n                {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Shipment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"console.log(carrierBookingRequestReference)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Reason: TransportPlan is not connected\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.contain(\"TransportPlan should be connected\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\":\"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"carrierBookingReference\": \"ABC123112s312s3\",\r\n    \"carrierSMDGCode\": \"MSK\",\r\n    \"termsAndConditions\": \"TERMS AND CONDITIONS!\",\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Waltershofer Hafen/S\",\r\n                \"locationType\": \"FACI\",\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"facilityCode\": \"EGH\",\r\n                \"facilityCodeListProvider\": \"SMDG\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PDE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ],\r\n    \"transports\": [\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 2,\r\n            \"loadLocation\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\"\r\n        },\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 1,\r\n            \"loadLocation\": {\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\",\r\n            \"modeOfTransport\": \"VESSEL\"\r\n        }\r\n    ],\r\n    \"advanceManifestFilings\" : [\r\n    {\r\n        \"manifestTypeCode\" : \"ACE\",\r\n        \"countryCode\": \"US\"\r\n    }\r\n]  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/shipments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"shipments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Test: Post Shipment where all Shipment locations do not appear oin Transport Locations",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw)\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n        \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Shipment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Reason: All Shipment locations with codes: PRE, POL, POD, PDE. Must appear in Transport locations\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.contain(\"All Shipment locations with codes\");\r",
													"    pm.expect(jsonData.errors[0].message).to.contain(\" Must appear in Transport locations\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\":\"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"carrierBookingReference\": \"ABC123112s312s3\",\r\n    \"carrierSMDGCode\": \"MSK\",\r\n    \"termsAndConditions\": \"TERMS AND CONDITIONS!\",\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"FCD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Waltershofer Hafen/S\",\r\n                \"locationType\": \"FACI\",\r\n                \"UNLocationCode\": \"S\",\r\n                \"facilityCode\": \"EGH\",\r\n                \"facilityCodeListProvider\": \"SMDG\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PDE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ],\r\n    \"transports\": [\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 1,\r\n            \"loadLocation\": {\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\",\r\n            \"modeOfTransport\": \"VESSEL\"\r\n        },\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 1,\r\n            \"loadLocation\": {\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\"\r\n        }\r\n    ],\r\n    \"advanceManifestFilings\" : [\r\n    {\r\n        \"manifestTypeCode\" : \"ACI\",\r\n        \"countryCode\": \"CA\"\r\n    }\r\n]  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/shipments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"shipments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Test: Post Shipment where POD is NOT the last location and PDE is not provided",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw)\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 3,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"LocationName /S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PRE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"DEHAM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Shipment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Reason: POD must be the last location if PDE is not provided\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.contain(\"POD must be the last location if PDE is not provided\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\":\"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"carrierBookingReference\": \"ABC123112s312s3\",\r\n    \"carrierSMDGCode\": \"MSK\",\r\n    \"termsAndConditions\": \"TERMS AND CONDITIONS!\",\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"SGSIN/S\",\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"SGSIN\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationName\": \"Waltershofer Hafen/S\",\r\n                \"locationType\": \"FACI\",\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"facilityCode\": \"EGH\",\r\n                \"facilityCodeListProvider\": \"SMDG\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"PDE\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        }\r\n    ],\r\n    \"transports\": [\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 2,\r\n            \"loadLocation\": {\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\"\r\n        },\r\n        {\r\n            \"transportPlanStage\": \"PRC\",\r\n            \"transportPlanStageSequenceNumber\": 1,\r\n            \"loadLocation\": {\r\n                \"UNLocationCode\": \"DEHAM\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"UNLocationCode\": \"SGSIN\",\r\n                \"locationType\": \"UNLO\",\r\n                \"locationName\": \"Eiffel Tower\"\r\n            },\r\n            \"plannedDepartureDate\": \"2021-12-12\",\r\n            \"plannedArrivalDate\": \"2021-12-12\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\",\r\n            \"modeOfTransport\": \"VESSEL\"\r\n        }\r\n    ],\r\n    \"advanceManifestFilings\" : [\r\n    {\r\n        \"manifestTypeCode\" : \"ACI\",\r\n        \"countryCode\": \"EG\"\r\n    }\r\n]  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/shipments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"shipments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "E2E Tests",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "Basic [Booking to TD]",
							"item": [
								{
									"name": "Create a booking",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REQUEST_REFERENCE\", parsedBody.carrierBookingRequestReference);\r",
													"pm.collectionVariables.set(\"POST_BODY\", pm.request.body.raw)\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"receiptTypeAtOrigin\": \"CY\",\r\n    \"deliveryTypeAtDestination\": \"CY\",\r\n    \"cargoMovementTypeAtOrigin\": \"FCL\",\r\n    \"cargoMovementTypeAtDestination\": \"FCL\",\r\n    \"serviceContractReference\": \"serviceRef\",\r\n    \"carrierExportVoyageNumber\": \"2106W\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"paymentTermCode\": \"PRE\",\r\n    \"isPartialLoadAllowed\": true,\r\n    \"isExportDeclarationRequired\": true,\r\n    \"exportDeclarationReference\": \"exportDeclarationRef\",\r\n    \"isImportLicenseRequired\": true,\r\n    \"importLicenseReference\": \"importLicenseRef\",\r\n    \"isAMSACIFilingRequired\": true,\r\n    \"isDestinationFilingRequired\": true,\r\n    \"contractQuotationReference\": \"contractQuotationRef\",\r\n    \"expectedDepartureDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": \"2052-11-15\",\r\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": \"2052-11-15\",\r\n    \"transportDocumentTypeCode\": \"BOL\",\r\n    \"transportDocumentReference\": \"transportDocumentRef\",\r\n    \"bookingChannelReference\": \"bookingChannelRef\",\r\n    \"incoTerms\": \"FOB\",\r\n    \"communicationChannelCode\": \"AO\",\r\n    \"isEquipmentSubstitutionAllowed\": true,\r\n    \"vesselIMONumber\": \"9321483\",\r\n    \"invoicePayableAt\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"placeOfBLIssue\": {\r\n        \"locationName\": \"Asseco DK office\",\r\n        \"locationType\": \"ADDR\",\r\n        \"address\": {\r\n            \"name\": \"Asseco DK\",\r\n            \"street\": \"Kronprinsessegade\",\r\n            \"streetNumber\": \"54\",\r\n            \"floor\": \"5. sal\",\r\n            \"postCode\": \"1306\",\r\n            \"city\": \"København\",\r\n            \"country\": \"Denmark\"\r\n        }\r\n    },\r\n    \"requestedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22G1\",\r\n            \"units\": 1,\r\n            \"isShipperOwned\": false,\r\n            \"commodities\": [\r\n                {\r\n                    \"HSCodes\": [\"411510\"],\r\n                    \"commodityType\": \"commodity type\",\r\n                    \"cargoGrossWeight\": 323.32,\r\n                    \"cargoGrossWeightUnit\": \"KGM\",\r\n                    \"cargoGrossVolume\": 100.0,\r\n                    \"cargoGrossVolumeUnit\": \"MTQ\",\r\n                    \"outerPackaging\": {\r\n                        \"packageCode\" : \"1A\",\r\n                        \"imoPackagingCode\": \"A1222\",\r\n                        \"numberOfPackages\": 1,\r\n                        \"description\": \"steel\"\r\n\r\n                    },\r\n                    \"exportLicenseIssueDate\": \"2022-11-15\",\r\n                    \"exportLicenseExpiryDate\": \"2023-05-15\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"ref value\"\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"boring party\",\r\n                \"address\": {\r\n                    \"name\": \"Asseco DK\",\r\n                    \"street\": \"Kronprinsessegade\",\r\n                    \"streetNumber\": \"54\",\r\n                    \"floor\": \"5. sal\",\r\n                    \"postCode\": \"1306\",\r\n                    \"city\": \"København\",\r\n                    \"country\": \"Denmark\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"Henrik\",\r\n                        \"phone\": \"+31611444666\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"DCSA\",\r\n                        \"partyCode\": \"reponsible fun\",\r\n                        \"codeListName\": \"irreponsible fun\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"BA\",\r\n            \"displayedAddress\": [\r\n                \"line1\",\r\n                \"line2\"\r\n            ],\r\n            \"isToBeNotified\": true\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\" \r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Booking by carrierBookingRequestReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"BOOKING_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Trigger validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Document status is correct\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.be.eq(\"PENC\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/bookings/{{CARRIER_BOOKING_REQUEST_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"bookings",
												"{{CARRIER_BOOKING_REQUEST_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST Shipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"CARRIER_BOOKING_REFERENCE\", parsedBody.carrierBookingReference);\r",
													"\r",
													"\r",
													"pm.test(\"HTTP code is correct\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Document status is correct\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.be.eq(\"CONF\");\r",
													"});\r",
													"\r",
													"pm.test(\"Has CBR\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).has.property(\"carrierBookingReference\");\r",
													"    pm.expect(jsonData.carrierBookingReference).to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"console.log(carrierBookingRequestReference)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"carrierBookingRequestReference\":\"{{CARRIER_BOOKING_REQUEST_REFERENCE}}\",\r\n    \"carrierSMDGCode\": \"MSK\",\r\n    \"termsAndConditions\": \"TERMS AND CONDITIONS!\",\r\n    \"confirmedEquipments\": [\r\n        {\r\n            \"ISOEquipmentCode\": \"22GP\",\r\n            \"units\": 1\r\n        }\r\n    ],\r\n    \"shipmentCutOffTimes\": [\r\n        {\r\n            \"cutOffDateTimeCode\": \"DCO\",\r\n            \"cutOffDateTime\": \"2099-01-01T00:00:00Z\"\r\n        }\r\n    ],\r\n    \"shipmentLocations\": [\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POL\",\r\n            \"eventDateTime\": \"2022-11-15T10:34:41.99631016+01:00\"\r\n        },\r\n        {\r\n            \"location\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"shipmentLocationTypeCode\": \"POD\",\r\n            \"eventDateTime\": \"2022-11-21T10:34:41.99631016+01:00\"\r\n        }\r\n    ],\r\n    \"commoditySubreferences\": [\r\n        [\r\n            \"commodity-subreference\"\r\n        ]\r\n    ],\r\n    \"transports\": [\r\n        {\r\n            \"transportPlanStage\": \"MNC\",\r\n            \"transportPlanStageSequenceNumber\": 1,\r\n            \"loadLocation\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"NLRTM\"\r\n            },\r\n            \"dischargeLocation\": {\r\n                \"locationType\": \"UNLO\",\r\n                \"UNLocationCode\": \"USMIA\"\r\n            },\r\n            \"plannedDepartureDate\": \"2022-11-15\",\r\n            \"plannedArrivalDate\": \"2022-11-21\",\r\n            \"modeOfTransport\": \"VESSEL\",\r\n            \"vesselName\": \"Emma Maersk\",\r\n            \"vesselIMONumber\": \"9321483\",\r\n            \"carrierImportVoyageNumber\": \"TNT1E\",\r\n            \"carrierExportVoyageNumber\": \"TNT1E\"\r\n        }\r\n    ],\r\n    \"advanceManifestFilings\" : [\r\n        {\r\n            \"manifestTypeCode\" : \"ACI\",\r\n            \"countryCode\": \"CA\"\r\n        },\r\n            {\r\n            \"manifestTypeCode\" : \"ACE\",\r\n            \"countryCode\": \"US\"\r\n        }\r\n    ]    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{BKG_CONTEXT_PATH}}/shipments",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{BKG_CONTEXT_PATH}}",
												"shipments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Shipment by carrierBookingReference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response contains mandatory parent fields\", () => {\r",
													"    let carrierBookingReferenceUnderTest = pm.request.url.path[3];\r",
													"    let jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.carrierBookingReference).to.eql(carrierBookingReferenceUnderTest);\r",
													"    pm.expect(jsonData.shipmentCreatedDateTime, \"shipmentCreatedDateTime\").to.exist;\r",
													"    pm.expect(jsonData.booking, \"booking\").to.exist;\r",
													"    pm.expect(jsonData.transports, \"transports\").to.exist;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{BKG_CONTEXT_PATH}}/shipments/{{CARRIER_BOOKING_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{BKG_CONTEXT_PATH}}"
											],
											"path": [
												"shipments",
												"{{CARRIER_BOOKING_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Shipping instruction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"SHIPPING_INSTRUCTION_REFERENCE\", parsedBody.shippingInstructionReference);\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"isShippedOnBoardType\": true,\r\n    \"isElectronic\": true,\r\n    \"isToOrder\": false,\r\n    \"displayedNameForPortOfLoad\": [\r\n            \"Port of Rotterdam\"\r\n    ],\r\n    \"customsReferences\": [\r\n        {\r\n            \"type\": \"CERS\",\r\n            \"countryCode\": \"CA\",\r\n            \"value\": \"12345678\"\r\n        }\r\n    ],\r\n    \"consignmentItems\": [\r\n        {\r\n            \"HSCodes\": [\"411510\"],\r\n            \"carrierBookingReference\": \"{{CARRIER_BOOKING_REFERENCE}}\",\r\n            \"commoditySubreference\": \"commodity-subreference\",\r\n            \"weight\": 120.4,\r\n            \"weightUnit\": \"KGM\",\r\n            \"descriptionOfGoods\": \"The goods!\",\r\n            \"cargoItems\": [\r\n                {\r\n                    \"equipmentReference\": \"BMOU2149612\",\r\n                    \"weight\": 120.3,\r\n                    \"weightUnit\": \"KGM\",\r\n                    \"shippingMarks\": [\"bar\"]\r\n                }\r\n            ],\r\n            \"customsReferences\": [\r\n                {\r\n                    \"type\": \"CERS\",\r\n                    \"countryCode\": \"CA\",\r\n                    \"value\": \"12345678\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"utilizedTransportEquipments\": [\r\n        {\r\n            \"equipmentReference\": \"BMOU2149612\",\r\n            \"cargoGrossWeight\": 120.3,\r\n            \"cargoGrossWeightUnit\": \"KGM\",\r\n            \"isShipperOwned\": false,\r\n            \"seals\": [\r\n                {\r\n                    \"number\": \"12345\",\r\n                    \"source\": \"CAR\",\r\n                    \"type\": \"BLT\"\r\n                }\r\n            ],\r\n            \"customsReferences\": [\r\n                {\r\n                    \"type\": \"CERS\",\r\n                    \"countryCode\": \"CA\",\r\n                    \"value\": \"12345678\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"documentParties\": [\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"foo party\",\r\n                \"address\": {\r\n                    \"name\": \"foo address name\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"partycontact details\",\r\n                        \"email\": \"someone@foo.example.com\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"EPI\",\r\n                        \"partyCode\": \"foo@platform1.example.com\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"CN\",\r\n            \"displayedAddress\": [\r\n                \"foo\"\r\n            ],\r\n            \"isToBeNotified\": false\r\n        },\r\n        {\r\n            \"party\": {\r\n                \"partyName\": \"bar party\",\r\n                \"address\": {\r\n                    \"name\": \"bar address name\"\r\n                },\r\n                \"partyContactDetails\": [\r\n                    {\r\n                        \"name\": \"partycontact details\",\r\n                        \"email\": \"someone@bar.example.com\"\r\n                    }\r\n                ],\r\n                \"identifyingCodes\": [\r\n                    {\r\n                        \"DCSAResponsibleAgencyCode\": \"EPI\",\r\n                        \"partyCode\": \"bar@platform2.example.com\"\r\n                    }\r\n                ]\r\n            },\r\n            \"partyFunction\": \"OS\",\r\n            \"displayedAddress\": [\r\n                \"bar\"\r\n            ],\r\n            \"isToBeNotified\": false\r\n        }\r\n    ],\r\n    \"references\": [\r\n        {\r\n            \"type\": \"AAO\",\r\n            \"value\": \"foo reference\"\r\n        }\r\n    ],\r\n    \"advanceManifestFilings\" : [\r\n    {\r\n        \"manifestTypeCode\" : \"ACI\",\r\n        \"countryCode\": \"CA\",\r\n        \"advanceManifestFilingsPerformedBy\": \"SHIPPER\",\r\n        \"selfFilerCode\":\"FCL\"\r\n    },\r\n        {\r\n        \"manifestTypeCode\" : \"ACE\",\r\n        \"countryCode\": \"US\",\r\n        \"advanceManifestFilingsPerformedBy\": \"SHIPPER\",\r\n        \"selfFilerCode\":\"FCL\"\r\n    }\r\n],\r\n    \"requestedCarrierCertificates\" : [\r\n        \"SHIPMENT_VOYAGE_PARTICULARS_1\",\r\n        \"SHIPMENT_VOYAGE_PARTICULARS_2\"\r\n    ],\r\n    \"requestedCarrierClauses\" : [\r\n        \"CARGO_CARGOSPECIFICS\",\r\n        \"VESSELCONVEYANCE_COUNTRYSPECIFIC\"\r\n    ]\r\n    \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions",
											"host": [
												"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
											],
											"path": [
												"shipping-instructions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify saved shipping instruction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const shippingInstructionReference = pm.collectionVariables.get(\"SHIPPING_INSTRUCTION_REFERENCE\");\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains updated values\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.shippingInstructionReference).to.eql(shippingInstructionReference);\r",
													"\r",
													"    // Posting a new bookign should put us in \"RECE\".\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/shipping-instructions/{{SHIPPING_INSTRUCTION_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
											],
											"path": [
												"shipping-instructions",
												"{{SHIPPING_INSTRUCTION_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Shipping instruction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"SHIPPING_INSTRUCTION_REFERENCE\", parsedBody.shippingInstructionReference);\r",
													"\r",
													"pm.test(\"Status code is correct\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"documentStatus is RECE\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.eql(\"RECE\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{EBL_CONTEXT_PATH}}/shipping-instructions/{{SHIPPING_INSTRUCTION_REFERENCE}}/validate",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{EBL_CONTEXT_PATH}}",
												"shipping-instructions",
												"{{SHIPPING_INSTRUCTION_REFERENCE}}",
												"validate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Issue draft TD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const parsedBody = pm.response.json();\r",
													"pm.collectionVariables.set(\"TRANSPORT_DOCUMENT_REFERENCE\", parsedBody.transportDocumentReference);\r",
													"\r",
													"\r",
													"pm.test(\"HTTP code is correct\", () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Document status is correct\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.be.eq(\"DRFT\");\r",
													"});\r",
													"\r",
													"pm.test(\"Has CBR\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).has.property(\"transportDocumentReference\");\r",
													"    pm.expect(jsonData.transportDocumentReference).to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const carrierBookingRequestReference = pm.collectionVariables.get(\"CARRIER_BOOKING_REQUEST_REFERENCE\");\r",
													"console.log(carrierBookingRequestReference)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"shippingInstructionReference\": \"{{SHIPPING_INSTRUCTION_REFERENCE}}\",\r\n    \"declaredValue\": 3.14,\r\n    \"declaredValueCurrency\": \"DKK\",\r\n    \"issuingParty\": {\r\n        \"partyContactDetails\": [\r\n            {\r\n                \"name\": \"Jane Møller\",\r\n                \"email\": \"jane.moeller@maersk.example.com\"\r\n            }\r\n        ],\r\n        \"identifyingCodes\": [\r\n            {\r\n                \"partyCode\": \"MSK\",\r\n                \"DCSAResponsibleAgencyCode\": \"SMDG\",\r\n                \"codeListName\": \"LCL\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{EBL_CONTEXT_PATH}}/transport-documents",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{EBL_CONTEXT_PATH}}",
												"transport-documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "TransportDocument by transportdocument reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"TRANSPORT_DOCUMENT_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/transport-documents/{{TRANSPORT_DOCUMENT_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
											],
											"path": [
												"transport-documents",
												"{{TRANSPORT_DOCUMENT_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Approve TransportDocument",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Document status is correct\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.be.eq(\"APPR\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"documentStatus\": \"APPR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/transport-documents/{{TRANSPORT_DOCUMENT_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
											],
											"path": [
												"transport-documents",
												"{{TRANSPORT_DOCUMENT_REFERENCE}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Issue TransportDocument",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Document status is correct\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.documentStatus).to.be.eq(\"ISSU\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"documentStatus\": \"ISSU\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/unofficial{{EBL_CONTEXT_PATH}}/transport-documents/{{TRANSPORT_DOCUMENT_REFERENCE}}/change-state",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"unofficial{{EBL_CONTEXT_PATH}}",
												"transport-documents",
												"{{TRANSPORT_DOCUMENT_REFERENCE}}",
												"change-state"
											]
										}
									},
									"response": []
								},
								{
									"name": "Issued TransportDocument by transportdocument reference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const schema = pm.collectionVariables.get(\"TRANSPORT_DOCUMENT_RESPONSE_SCHEMA\");\r",
													"const schemaObject = JSON.parse(schema);\r",
													"\r",
													"pm.test('Schema is valid', () => {\r",
													"    pm.response.to.have.jsonSchema(schemaObject);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}{{EBL_CONTEXT_PATH}}/transport-documents/{{TRANSPORT_DOCUMENT_REFERENCE}}",
											"host": [
												"{{BASE_URL}}{{EBL_CONTEXT_PATH}}"
											],
											"path": [
												"transport-documents",
												"{{TRANSPORT_DOCUMENT_REFERENCE}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BOOKING_SUMMARY_SCHEMA",
			"value": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.\\n\",\"required\":[\"bookingRequestCreatedDateTime\",\"bookingRequestUpdatedDateTime\",\"cargoMovementTypeAtDestination\",\"cargoMovementTypeAtOrigin\",\"carrierBookingRequestReference\",\"deliveryTypeAtDestination\",\"documentStatus\",\"isEquipmentSubstitutionAllowed\",\"isExportDeclarationRequired\",\"isImportLicenseRequired\",\"isPartialLoadAllowed\",\"receiptTypeAtOrigin\",\"serviceContractReference\"],\"properties\":{\"carrierBookingRequestReference\":{\"type\":\"string\",\"description\":\"A reference to the booking during the booking request phase\\n\"},\"documentStatus\":{\"type\":\"string\",\"description\":\"The status of the booking. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- CANC (Cancelled)\\n- CMPL (Completed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\"enum\":[\"RECE\",\"PENU\",\"PENC\",\"CONF\",\"REJE\",\"CANC\",\"CMPL\"]},\"bookingRequestCreatedDateTime\":{\"type\":\"string\",\"description\":\"The date and time when the booking request was created\\n\",\"format\":\"date-time\"},\"bookingRequestUpdatedDateTime\":{\"type\":\"string\",\"description\":\"Last date and time when the booking request was updated\\n\",\"format\":\"date-time\"},\"receiptTypeAtOrigin\":{\"maxLength\":3,\"type\":\"string\",\"description\":\"Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\\n\",\"enum\":[\"CY\",\"SD\",\"CFS\"]},\"deliveryTypeAtDestination\":{\"maxLength\":3,\"type\":\"string\",\"description\":\"Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\\n\",\"enum\":[\"CY\",\"SD\",\"CFS\"]},\"cargoMovementTypeAtOrigin\":{\"maxLength\":3,\"type\":\"string\",\"description\":\"Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\\n\",\"enum\":[\"FCL\",\"LCL\",\"BB\"]},\"cargoMovementTypeAtDestination\":{\"maxLength\":3,\"type\":\"string\",\"description\":\"Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\\n\",\"enum\":[\"FCL\",\"LCL\",\"BB\"]},\"serviceContractReference\":{\"maxLength\":30,\"type\":\"string\",\"description\":\"Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.\"},\"paymentTermCode\":{\"type\":\"string\",\"description\":\"Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\\n- PRE (Prepaid)\\n- COL (Collect)\\n\",\"enum\":[\"PRE\",\"COL\"]},\"isPartialLoadAllowed\":{\"type\":\"boolean\",\"description\":\"Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\\n\"},\"isExportDeclarationRequired\":{\"type\":\"boolean\",\"description\":\"Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\\n\"},\"exportDeclarationReference\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is ‘True’.\\n\"},\"isImportLicenseRequired\":{\"type\":\"boolean\",\"description\":\"Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.\\n\"},\"importLicenseReference\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ‘True’.\\n\"},\"isAMSACIFilingRequired\":{\"type\":\"boolean\",\"description\":\"Customs filing for US (AMS) or Canadian (ACI) customs\\n\"},\"isDestinationFilingRequired\":{\"type\":\"boolean\",\"description\":\"Indicates whether the shipper will perform the AMS/ACI filing directly or not. Mandatory if AMS/ACI filing is required\\n\"},\"contractQuotationReference\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.\\n\"},\"expectedDepartureDate\":{\"type\":\"string\",\"description\":\"The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent. If vessel/voyage or expected date of arrival is not provided, this is mandatory\\n\",\"format\":\"date\"},\"expectedArrivalAtPlaceOfDeliveryStartDate\":{\"type\":\"string\",\"description\":\"The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryEndDate`\\n\",\"format\":\"date\"},\"expectedArrivalAtPlaceOfDeliveryEndDate\":{\"type\":\"string\",\"description\":\"The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryStartDate`\\n\",\"format\":\"date\"},\"transportDocumentTypeCode\":{\"type\":\"string\",\"description\":\"Specifies the type of the transport document\\n- BOL (Bill of Lading)\\n- BTO (Bill of Lading to order)\\n- SWB (Sea Waybill)\\n\",\"enum\":[\"BOL\",\"BTO\",\"SWB\"]},\"transportDocumentReference\":{\"maxLength\":20,\"type\":\"string\",\"description\":\"A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\\n\"},\"bookingChannelReference\":{\"maxLength\":20,\"type\":\"string\",\"description\":\"Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other. Conditional on booking channel being used\\n\"},\"incoTerms\":{\"type\":\"string\",\"description\":\"Transport obligations, costs and risks as agreed between buyer and seller.\\n- FCA (Free Carrier)\\n- FOB (Free on Board)\\n\",\"enum\":[\"FCA\",\"FOB\"]},\"communicationChannelCode\":{\"maxLength\":2,\"type\":\"string\",\"description\":\"Specifying which communication channel is to be used for this booking e.g.\\n- EI (EDI transmission)\\n- EM (Email)\\n- AO (API)\\n\",\"enum\":[\"EI\",\"EM\",\"AO\"]},\"isEquipmentSubstitutionAllowed\":{\"type\":\"boolean\",\"description\":\"Indicates if an alternate equipment type can be provided by the carrier.\\n\"},\"vesselName\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"The name of the Vessel given by the Vessel Operator and registered with IMO.\\n\"},\"vesselIMONumber\":{\"maxLength\":7,\"type\":\"string\",\"description\":\"The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\\n\"},\"exportVoyageNumber\":{\"maxLength\":50,\"type\":\"string\",\"description\":\"The vessel operator-specific identifier of the export Voyage.\"},\"preCarriageModeOfTransportCode\":{\"type\":\"string\",\"description\":\"The mode of transport as defined by DCSA.\\n\",\"enum\":[\"VESSEL\",\"RAIL\",\"TRUCK\",\"BARGE\"]}}}}",
			"type": "string"
		},
		{
			"key": "ERROR_SCHEMA",
			"value": "{\"required\":[\"errorDateTime\",\"errors\",\"httpMethod\",\"requestUri\",\"statusCode\",\"statusCodeText\"],\"type\":\"object\",\"properties\":{\"httpMethod\":{\"type\":\"string\",\"description\":\"The http request method type e.g. GET, POST\\n\",\"enum\":[\"GET\",\"HEAD\",\"POST\",\"PUT\",\"DELETE\",\"OPTION\",\"PATCH\"]},\"requestUri\":{\"type\":\"string\",\"description\":\"The request URI as it was sent\\n\"},\"statusCode\":{\"type\":\"integer\",\"description\":\"The HTTP status code\\n\"},\"statusCodeText\":{\"type\":\"string\",\"description\":\"The textual representation of the status code\\n\"},\"errorMessage\":{\"maxLength\":200,\"type\":\"string\",\"description\":\"Other error information\\n\"},\"providerCorrelationID\":{\"type\":\"string\",\"description\":\"A unique identifier for the transaction, e.g. a UUID\\n\"},\"errorDateTime\":{\"type\":\"string\",\"description\":\"The date and time (in ISO 8601 format) the error occurred.\\n\",\"format\":\"date-time\"},\"errors\":{\"minItems\":1,\"type\":\"array\",\"description\":\"List of detailed errors, e.g. fields that could not pass validation\\n\",\"items\":{\"allOf\":[{\"required\":[\"message\",\"reason\"],\"type\":\"object\",\"properties\":{\"errorCode\":{\"maximum\":7999,\"minimum\":7000,\"type\":\"integer\",\"description\":\"Standard error code see http://dcsa.org/error-codes (to be created). Examples: 7003 â€“ out or range value, 7004 -  invalid type\\n\"},\"field\":{\"type\":\"string\",\"description\":\"The field that caused the error, e.g. a failed validation\\n\"},\"value\":{\"type\":\"string\",\"description\":\"The value that of the field that caused the error\\n\"},\"reason\":{\"type\":\"string\",\"description\":\"High level error message\\n\"},\"message\":{\"type\":\"string\",\"description\":\"Additional information as to why the error occured\\n\"}},\"$schema\":\"http://json-schema.org/schema#\"}]}}},\"$schema\":\"http://json-schema.org/schema#\"}",
			"type": "string"
		},
		{
			"key": "BASE_URL",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "SHIPMENT_SUMMARY_SCHEMA",
			"value": "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Shipment 'metadata'\\n\",\"required\":[\"carrierBookingReference\",\"shipmentCreatedDateTime\"],\"properties\":{\"carrierBookingReference\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"A set of unique characters provided by carrier to identify a booking.\"},\"shipmentCreatedDateTime\":{\"type\":\"string\",\"description\":\"The date and time when the shipment was created (equivalent to when the Booking was confirmed).\\n\",\"format\":\"date-time\"},\"shipmentUpdatedDateTime\":{\"type\":\"string\",\"description\":\"Last date and time when the Shipment was updated.\\n\",\"format\":\"date-time\"},\"termsAndConditions\":{\"type\":\"string\",\"description\":\"Carrier general terms and conditions for the booking.\\n\"},\"carrierBookingRequestReference\":{\"type\":\"string\",\"description\":\"A reference to the booking during the booking request phase\\n\"},\"documentStatus\":{\"type\":\"string\",\"description\":\"The status of the booking. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- CANC (Cancelled)\\n- CMPL (Completed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\"enum\":[\"RECE\",\"PENU\",\"PENC\",\"CONF\",\"REJE\",\"CANC\",\"CMPL\"]}}}}",
			"type": "string"
		},
		{
			"key": "SHIPPING_INSTRUCTIONS_SUMMARY_SCHEMA",
			"value": "{\"type\":\"array\",\"items\":{\"required\":[\"documentStatus\",\"isElectronic\",\"isShippedOnBoardType\",\"isToOrder\",\"shippingInstructionCreatedDateTime\",\"shippingInstructionReference\",\"shippingInstructionUpdatedDateTime\"],\"type\":\"object\",\"description\":\"A 'shallow' representation of the Shipping Instruction. This version of the Shipping Instruction does not contain nested objects. For a 'rich' version of the Shipping Instruction please use the `GET` endPoint.\\n\",\"properties\":{\"shippingInstructionReference\":{\"maxLength\":100,\"type\":\"string\",\"description\":\"The identifier for a shipping instruction provided by the carrier for system purposes.\\n\"},\"documentStatus\":{\"type\":\"string\",\"description\":\"The status of the Bill of Lading. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- DRFT (Draft)\\n- PENA (Pending Approval)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- VOID (Void)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\"enum\":[\"RECE\",\"PENU\",\"DRFT\",\"PENA\",\"APPR\",\"ISSU\",\"SURR\",\"VOID\"]},\"shippingInstructionCreatedDateTime\":{\"type\":\"string\",\"description\":\"Date and time when the ShippingInstruction was created\\n\",\"format\":\"date-time\"},\"shippingInstructionUpdatedDateTime\":{\"type\":\"string\",\"description\":\"Date and time when the ShippingInstruction was updated\\n\",\"format\":\"date-time\"},\"amendToTransportDocument\":{\"maxLength\":20,\"type\":\"string\",\"description\":\"This field can be used to reference a Transport Document that is issued (documentStatus = `ISSU`) in order to amend changes.\\n\\nThe field cannot be modified once set.\\n\"},\"transportDocumentTypeCode\":{\"type\":\"string\",\"description\":\"Specifies the type of the transport document\\n- BOL (Bill of Lading)\\n- SWB (Sea Waybill)\\n\",\"enum\":[\"BOL\",\"SWB\"]},\"isShippedOnBoardType\":{\"type\":\"boolean\",\"description\":\"Specifies whether the Transport document is a received for shipment, or shipped on board.\"},\"numberOfCopies\":{\"type\":\"integer\",\"description\":\"The requested number of copies of the Transport document to be issued by the carrier. Only applicable for physical documents\",\"minimum\":-2147483648,\"maximum\":2147483647},\"numberOfOriginals\":{\"type\":\"integer\",\"description\":\"Number of original copies of the negotiable bill of lading that has been requested by the customer.\\n\",\"minimum\":-2147483648,\"maximum\":2147483647},\"isElectronic\":{\"type\":\"boolean\",\"description\":\"An indicator whether the transport document is electronically transferred.\"},\"isToOrder\":{\"type\":\"boolean\",\"description\":\"Indicates whether the transport document is issued `to order` or not\\n\"},\"areChargesDisplayedOnOriginals\":{\"type\":\"boolean\",\"description\":\"An indicator of whether the charges are displayed on the original documents.\\n\"},\"areChargesDisplayedOnCopies\":{\"type\":\"boolean\",\"description\":\"An indicator of whether the charges are displayed on the copies of the documents.\\n\"},\"displayedNameForPlaceOfReceipt\":{\"type\":\"array\",\"items\":{\"maxLength\":250,\"type\":\"string\",\"description\":\"A single address line.\"},\"description\":\"The address of the Party to be displayed on the transport document.\"},\"displayedNameForPortOfLoad\":{\"type\":\"array\",\"items\":{\"maxLength\":250,\"type\":\"string\",\"description\":\"A single address line.\"},\"description\":\"The address of the Party to be displayed on the transport document.\"},\"displayedNameForPortOfDischarge\":{\"type\":\"array\",\"items\":{\"maxLength\":250,\"type\":\"string\",\"description\":\"A single address line.\"},\"description\":\"The address of the Party to be displayed on the transport document.\"},\"displayedNameForPlaceOfDelivery\":{\"type\":\"array\",\"items\":{\"maxLength\":250,\"type\":\"string\",\"description\":\"A single address line.\"},\"description\":\"The address of the Party to be displayed on the transport document.\"},\"carrierBookingReferences\":{\"type\":\"array\",\"description\":\"A list of all `carrierBookingReferences` used. The `carrierBookingReferences` are sourced from the `CargoItems` or the root object of the SI.\\n\",\"items\":{\"maxLength\":35,\"type\":\"string\",\"description\":\"A set of unique characters provided by carrier to identify a booking.\"}}}}}",
			"type": "string"
		},
		{
			"key": "BKG_CONTEXT_PATH",
			"value": "/bkg/v2"
		},
		{
			"key": "EBL_CONTEXT_PATH",
			"value": "/ebl/v3"
		},
		{
			"key": "BOOKING_SCHEMA",
			"value": "{\n  \"type\": \"object\",\n  \"description\": \"includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.\\n\",\n  \"required\": [\n    \"bookingRequestCreatedDateTime\",\n    \"bookingRequestUpdatedDateTime\",\n    \"cargoMovementTypeAtDestination\",\n    \"cargoMovementTypeAtOrigin\",\n    \"carrierBookingRequestReference\",\n    \"requestedEquipments\",\n    \"communicationChannelCode\",\n    \"deliveryTypeAtDestination\",\n    \"documentStatus\",\n    \"isEquipmentSubstitutionAllowed\",\n    \"isExportDeclarationRequired\",\n    \"isImportLicenseRequired\",\n    \"isPartialLoadAllowed\",\n    \"receiptTypeAtOrigin\",\n    \"serviceContractReference\"\n  ],\n  \"properties\": {\n    \"carrierBookingRequestReference\": {\n      \"type\": \"string\",\n      \"description\": \"A reference to the booking during the booking request phase\\n\"\n    },\n    \"documentStatus\": {\n      \"type\": \"string\",\n      \"description\": \"The status of the booking. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- CANC (Cancelled)\\n- CMPL (Completed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\n      \"enum\": [\n        \"RECE\",\n        \"PENU\",\n        \"PENC\",\n        \"CONF\",\n        \"REJE\",\n        \"CANC\",\n        \"CMPL\"\n      ]\n    },\n    \"bookingRequestCreatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"The date and time when the booking request was created\\n\",\n      \"format\": \"date-time\"\n    },\n    \"bookingRequestUpdatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"Last date and time when the booking request was updated\\n\",\n      \"format\": \"date-time\"\n    },\n    \"receiptTypeAtOrigin\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n      \"enum\": [\n        \"CY\",\n        \"SD\",\n        \"CFS\"\n      ]\n    },\n    \"deliveryTypeAtDestination\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n      \"enum\": [\n        \"CY\",\n        \"SD\",\n        \"CFS\"\n      ]\n    },\n    \"cargoMovementTypeAtOrigin\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n      \"enum\": [\n        \"FCL\",\n        \"LCL\",\n        \"BB\"\n      ]\n    },\n    \"cargoMovementTypeAtDestination\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n      \"enum\": [\n        \"FCL\",\n        \"LCL\",\n        \"BB\"\n      ]\n    },\n    \"serviceContractReference\": {\n      \"maxLength\": 30,\n      \"type\": \"string\",\n      \"description\": \"Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.\"\n    },\n    \"carrierExportVoyageNumber\": {\n      \"type\": \"string\",\n      \"maxLength\": 50,\n      \"description\": \"\"\n    },\n    \"universalExportVoyageReference\": {\n      \"type\": \"string\",\n      \"maxLength\": 5,\n      \"description\": \"\"\n    },\n    \"carrierServiceCode\": {\n      \"type\": \"string\",\n      \"maxLength\": 11,\n      \"description\": \"\"\n    },\n    \"universalServiceReference\": {\n      \"type\": \"string\",\n      \"maxLength\": 8,\n      \"description\": \"\"\n    },\n    \"vesselName\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"The name of the Vessel given by the Vessel Operator and registered with IMO.\\n\"\n    },\n    \"exportVoyageNumber\": {\n      \"maxLength\": 50,\n      \"type\": \"string\",\n      \"description\": \"The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage. The result will only return schedules including the export Voyage Number\\n\"\n    },\n    \"declaredValue\": {\n      \"type\": \"number\",\n      \"description\": \"The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and \\\"Ad Valorem\\\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\",\n      \"minimum\": -3.402823669209385E+38,\n      \"maximum\": 3.402823669209385E+38\n    },\n    \"declaredValueCurrency\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"The currency used for the declared value, using the 3-character code defined by ISO 4217.\"\n    },\n    \"paymentTermCode\": {\n      \"type\": \"string\",\n      \"description\": \"Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\\n- PRE (Prepaid)\\n- COL (Collect)\\n\",\n      \"enum\": [\n        \"PRE\",\n        \"COL\"\n      ]\n    },\n    \"isPartialLoadAllowed\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\\n\"\n    },\n    \"isExportDeclarationRequired\": {\n      \"type\": \"boolean\",\n      \"description\": \"Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\\n\"\n    },\n    \"exportDeclarationReference\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is ÔÇÿTrue'.\\n\"\n    },\n    \"isImportLicenseRequired\": {\n      \"type\": \"boolean\",\n      \"description\": \"Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.\\n\"\n    },\n    \"importLicenseReference\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ÔÇÿTrue'.\\n\"\n    },\n    \"isAMSACIFilingRequired\": {\n      \"type\": \"boolean\",\n      \"description\": \"Customs filing for US (AMS) or Canadian (ACI) customs\\n\"\n    },\n    \"isDestinationFilingRequired\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates whether the shipper will perform the AMS/ACI filing directly or not. Mandatory if AMS/ACI filing is required\\n\"\n    },\n    \"contractQuotationReference\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.\\n\"\n    },\n    \"expectedDepartureDate\": {\n      \"type\": \"string\",\n      \"description\": \"The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent. If vessel/voyage or expected date of arrival is not provided, this is mandatory\\n\",\n      \"format\": \"date\"\n    },\n    \"expectedArrivalAtPlaceOfDeliveryStartDate\": {\n      \"type\": \"string\",\n      \"description\": \"The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryEndDate`\\n\",\n      \"format\": \"date\"\n    },\n    \"expectedArrivalAtPlaceOfDeliveryEndDate\": {\n      \"type\": \"string\",\n      \"description\": \"The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryStartDate`\\n\",\n      \"format\": \"date\"\n    },\n    \"transportDocumentTypeCode\": {\n      \"type\": \"string\",\n      \"description\": \"Specifies the type of the transport document\\n- BOL (Bill of Lading)\\n- SWB (Sea Waybill)\\n\",\n      \"enum\": [\n        \"BOL\",\n        \"SWB\"\n      ]\n    },\n    \"transportDocumentReference\": {\n      \"maxLength\": 20,\n      \"type\": \"string\",\n      \"description\": \"A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\\n\"\n    },\n    \"bookingChannelReference\": {\n      \"maxLength\": 20,\n      \"type\": \"string\",\n      \"description\": \"Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other. Conditional on booking channel being used\\n\"\n    },\n    \"incoTerms\": {\n      \"type\": \"string\",\n      \"description\": \"Transport obligations, costs and risks as agreed between buyer and seller.\\n- FCA (Free Carrier)\\n- FOB (Free on Board)\\n\",\n      \"enum\": [\n        \"FCA\",\n        \"FOB\"\n      ]\n    },\n    \"communicationChannelCode\": {\n      \"maxLength\": 2,\n      \"type\": \"string\",\n      \"description\": \"Specifying which communication channel is to be used for this booking e.g.\\n- EI (EDI transmission)\\n- EM (Email)\\n- AO (API)\\n\",\n      \"enum\": [\n        \"EI\",\n        \"EM\",\n        \"AO\"\n      ]\n    },\n    \"isEquipmentSubstitutionAllowed\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if an alternate equipment type can be provided by the carrier.\\n\"\n    },\n    \"vesselIMONumber\": {\n      \"maxLength\": 7,\n      \"type\": \"string\",\n      \"description\": \"The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\\n\"\n    },\n    \"preCarriageModeOfTransportCode\": {\n      \"type\": \"string\",\n      \"description\": \"The mode of transport as defined by DCSA.\\n\",\n      \"enum\": [\n        \"VESSEL\",\n        \"RAIL\",\n        \"TRUCK\",\n        \"BARGE\"\n      ]\n    },\n    \"invoicePayableAt\": {\n      \"anyOf\": [\n        {\n          \"required\": [\n            \"address\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"address\": {\n              \"description\": \"Address related information\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"Name of the address\"\n                },\n                \"street\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the street of the party's address.\"\n                },\n                \"streetNumber\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The number of the street of the party's address.\"\n                },\n                \"floor\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The floor of the party's street number.\"\n                },\n                \"postCode\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The post code of the party's address.\"\n                },\n                \"city\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The city name of the party's address.\"\n                },\n                \"stateRegion\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The state/region of the party's address.\"\n                },\n                \"country\": {\n                  \"maxLength\": 75,\n                  \"type\": \"string\",\n                  \"description\": \"The country of the party's address.\"\n                }\n              }\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"UNLocationCode\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            }\n          }\n        }\n      ],\n      \"description\": \"General purpose object to capture `Invoice Payable At` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\"\n    },\n    \"placeOfBLIssue\": {\n      \"anyOf\": [\n        {\n          \"required\": [\n            \"address\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"address\": {\n              \"description\": \"Address related information\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"Name of the address\"\n                },\n                \"street\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the street of the party's address.\"\n                },\n                \"streetNumber\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The number of the street of the party's address.\"\n                },\n                \"floor\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The floor of the party's street number.\"\n                },\n                \"postCode\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The post code of the party's address.\"\n                },\n                \"city\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The city name of the party's address.\"\n                },\n                \"stateRegion\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The state/region of the party's address.\"\n                },\n                \"country\": {\n                  \"maxLength\": 75,\n                  \"type\": \"string\",\n                  \"description\": \"The country of the party's address.\"\n                }\n              }\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"UNLocationCode\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            }\n          }\n        }\n      ],\n      \"description\": \"General purpose object to capture `Place of B/L Issue` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\\nThe location where the original transport document (`Bill of Lading`) will be issued.\\n\"\n    },\n    \"requestedEquipments\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"isShipperOwned\",\n          \"ISOEquipmentCode\",\n          \"units\",\n          \"commodities\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"The requested equipments for the booking\\n\",\n        \"properties\": {\n          \"ISOEquipmentCode\": {\n            \"maxLength\": 4,\n            \"type\": \"string\",\n            \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n          },\n          \"units\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of requested equipment units\\n\",\n            \"minimum\": 1,\n            \"maximum\": 2147483647\n          },\n          \"equipmentReferences\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"maxLength\": 15,\n              \"type\": \"string\",\n              \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n            }\n          },\n          \"isShipperOwned\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicates whether the container is shipper owned (SOC).\"\n          },\n          \"commodities\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"required\": [\n                \"cargoGrossWeight\",\n                \"cargoGrossWeightUnit\",\n                \"commodityType\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"Type of goods in the booking, defined by its commodity type\\n\",\n              \"properties\": {\n                \"commodityType\": {\n                  \"maxLength\": 550,\n                  \"type\": \"string\",\n                  \"description\": \"High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by \\\"description of goods\\\" upon submission of shipping instruction\\n\"\n                },\n                \"HSCode\": {\n                  \"maxLength\": 10,\n                  \"type\": \"string\",\n                  \"description\": \"Used by customs to classify the product being shipped.\"\n                },\n                \"cargoGrossWeight\": {\n                  \"type\": \"number\",\n                  \"description\": \"The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).\",\n                  \"minimum\": -3.402823669209385E+38,\n                  \"maximum\": 3.402823669209385E+38\n                },\n                \"cargoGrossWeightUnit\": {\n                  \"type\": \"string\",\n                  \"description\": \"The unit of measure which can be expressed in imperial or metric terms\",\n                  \"enum\": [\n                    \"KGM\",\n                    \"LBR\"\n                  ]\n                },\n                \"cargoGrossVolume\": {\n                  \"type\": \"number\",\n                  \"description\": \"The grand total volume of the commodity\",\n                  \"minimum\": -3.402823669209385E+38,\n                  \"maximum\": 3.402823669209385E+38\n                },\n                \"cargoGrossVolumeUnit\": {\n                  \"type\": \"string\",\n                  \"description\": \"The unit of measure which can be expressed in either imperial or metric terms\\n- FTQ (Cubic meter)\\n- MTQ (Cubic foot)\\n\",\n                  \"enum\": [\n                    \"MTQ\",\n                    \"FTQ\"\n                  ]\n                },\n                \"numberOfPackages\": {\n                  \"type\": \"integer\",\n                  \"description\": \"Specifies the number of packages associated with this cargo item\",\n                  \"minimum\": -2147483648,\n                  \"maximum\": 2147483647\n                },\n                \"exportLicenseIssueDate\": {\n                  \"type\": \"string\",\n                  \"description\": \"Issue date of the export license applicable to the booking. Mandatory to provide in booking request for specific commodities\\n\",\n                  \"format\": \"date\"\n                },\n                \"exportLicenseExpiryDate\": {\n                  \"type\": \"string\",\n                  \"description\": \"Expiry date of the export license applicable to the booking.\\n\\nMandatory to provide in booking request for specific commodities.\\n\",\n                  \"format\": \"date\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"references\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"type\",\n          \"value\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight Forwarder's Reference)\\n- SI (Shipper's Reference)\\n- PO (Purchase Order Reference)\\n- CR (Customer's Reference)\\n- AAO (Consignee's Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>. Be aware that the list is a subset of the possible values.\\n\",\n            \"enum\": [\n              \"FF\",\n              \"SI\",\n              \"PO\",\n              \"CR\",\n              \"AAO\",\n              \"ECR\",\n              \"CSI\",\n              \"BPR\",\n              \"BID\",\n              \"EQ\",\n              \"RUC\",\n              \"DUE\",\n              \"CER\",\n              \"AES\"\n            ]\n          },\n          \"value\": {\n            \"maxLength\": 100,\n            \"type\": \"string\",\n            \"description\": \"The actual value of the reference.\"\n          }\n        }\n      }\n    },\n    \"documentParties\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"isToBeNotified\",\n          \"party\",\n          \"partyFunction\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"stores the parties involved in the transport document.\",\n        \"properties\": {\n          \"party\": {\n            \"required\": [\n              \"partyContactDetails\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"refers to a company or a legal entity.\",\n            \"properties\": {\n              \"partyName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"Name of the party.\"\n              },\n              \"taxReference1\": {\n                \"maxLength\": 20,\n                \"type\": \"string\",\n                \"description\": \"The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n              },\n              \"taxReference2\": {\n                \"maxLength\": 20,\n                \"type\": \"string\",\n                \"description\": \"Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n              },\n              \"publicKey\": {\n                \"maxLength\": 500,\n                \"type\": \"string\",\n                \"description\": \"The public key used for a digital signature.\"\n              },\n              \"address\": {\n                \"type\": \"object\",\n                \"description\": \"An object for storing address related information\\n\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              },\n              \"partyContactDetails\": {\n                \"minItems\": 1,\n                \"type\": \"array\",\n                \"description\": \"A list of contact details - the list cannot be empty\\n\",\n                \"items\": {\n                  \"required\": [\n                    \"name\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"Contact information for a Party\\n\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the contact\"\n                    },\n                    \"phone\": {\n                      \"maxLength\": 30,\n                      \"type\": \"string\",\n                      \"description\": \"Phone number for the contact\"\n                    },\n                    \"email\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"E-mail address for the contact\"\n                    }\n                  }\n                }\n              },\n              \"identifyingCodes\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"required\": [\n                    \"DCSAResponsibleAgencyCode\",\n                    \"partyCode\"\n                  ],\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"DCSAResponsibleAgencyCode\": {\n                      \"type\": \"string\",\n                      \"description\": \"A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\\n- ISO (International Standards Organization)\\n- UNECE (United Nations Economic Commission for Europe)\\n- LLOYD (Lloyd's register of shipping)\\n- BIC (Bureau International des Containeurs)\\n- IMO (International Maritime Organization)\\n- SCAC (Standard Carrier Alpha Code)\\n- ITIGG (International Transport Implementation Guidelines Group)\\n- ITU (International Telecommunication Union)\\n- SMDG (Shipplanning Message Development Group)\\n- EXIS (Exis Technologies Ltd.)\\n- FMC (Federal Maritime Commission)\\n- CBSA (Canada Border Services Agency)\\n- DCSA (Digital Container Shipping Association)\\n- ZZZ (Mutually defined)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).\\n\",\n                      \"enum\": [\n                        \"ISO\",\n                        \"UNECE\",\n                        \"LLOYD\",\n                        \"BIC\",\n                        \"IMO\",\n                        \"SCAC\",\n                        \"ITIGG\",\n                        \"ITU\",\n                        \"SMDG\",\n                        \"EXIS\",\n                        \"FMC\",\n                        \"CBSA\",\n                        \"DCSA\",\n                        \"ZZZ\"\n                      ]\n                    },\n                    \"partyCode\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Code to identify the party as provided by the agency\\n\"\n                    },\n                    \"codeListName\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the list, provided by the responsible agency\\n\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"partyFunction\": {\n            \"type\": \"string\",\n            \"description\": \"Specifies the role of the party in the context of the given Shipping Instruction.\\n- OS (Original shipper)\\n- CN (Consignee)\\n- COW (Invoice payer on behalf of the consignor (shipper))\\n- COX (Invoice payer on behalf of the consignee)\\n- MS (Document/message issuer/sender)\\n- N1 (First Notify Party)\\n- N2 (Second Notify Party)\\n- NI (Other Notify Party)\\n- DDR (Consignor's freight forwarder)\\n- DDS (Consignee's freight forwarder)\\n- HE (Carrier booking office (transportation office))\\n- SCO (Service contract owner - Defined by DCSA)\\n- BA (Booking Agency)\\n- EBL (EBL Solution Provider)\\n\",\n            \"enum\": [\n              \"OS\",\n              \"CN\",\n              \"COW\",\n              \"COX\",\n              \"MS\",\n              \"N1\",\n              \"N2\",\n              \"NI\",\n              \"DDR\",\n              \"DDS\",\n              \"HE\",\n              \"SCO\",\n              \"BA\",\n              \"EBL\"\n            ]\n          },\n          \"displayedAddress\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"maxLength\": 250,\n              \"type\": \"string\",\n              \"description\": \"A single address line.\"\n            }\n          },\n          \"isToBeNotified\": {\n            \"type\": \"boolean\",\n            \"description\": \"Used to decide whether the party will be notified of the arrival of the cargo.\"\n          }\n        }\n      }\n    },\n    \"shipmentLocations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"location\",\n          \"shipmentLocationTypeCode\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"maps the relationship between Shipment and Location, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`\\n\",\n        \"properties\": {\n          \"location\": {\n            \"anyOf\": [\n              {\n                \"required\": [\n                  \"address\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"address\": {\n                    \"description\": \"Address related information\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"name\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"Name of the address\"\n                      },\n                      \"street\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the street of the party's address.\"\n                      },\n                      \"streetNumber\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The number of the street of the party's address.\"\n                      },\n                      \"floor\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The floor of the party's street number.\"\n                      },\n                      \"postCode\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The post code of the party's address.\"\n                      },\n                      \"city\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The city name of the party's address.\"\n                      },\n                      \"stateRegion\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The state/region of the party's address.\"\n                      },\n                      \"country\": {\n                        \"maxLength\": 75,\n                        \"type\": \"string\",\n                        \"description\": \"The country of the party's address.\"\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"UNLocationCode\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"facilityCode\",\n                  \"facilityCodeListProvider\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  },\n                  \"facilityCode\": {\n                    \"maxLength\": 6,\n                    \"type\": \"string\",\n                    \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                  },\n                  \"facilityCodeListProvider\": {\n                    \"type\": \"string\",\n                    \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                    \"enum\": [\n                      \"BIC\",\n                      \"SMDG\"\n                    ]\n                  }\n                }\n              }\n            ],\n            \"description\": \"General purpose object to capture the location in the `ShipmentLocation`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\"\n          },\n          \"shipmentLocationTypeCode\": {\n            \"type\": \"string\",\n            \"description\": \"Links to the Location Type Code defined by DCSA.\\n- PRE (Place of Receipt)\\n- POL (Port of Loading)\\n- POD (Port of Discharge)\\n- PDE (Place of Delivery)\\n- PCF (Pre-carriage From)\\n- PSR (Pre-carriage under shipper's responsibility)\\n- OIR (Onward In-land Routing)\\n- DRL (Depot release location)\\n- ORI (Origin of goods)\\n- IEL (Container intermediate export stop off location)\\n- PTP (Prohibited transshipment port)\\n- RTP (Requested transshipment port)\\n- FCD (Full container drop-off location)\\n- ECP (Empty container pick-up date and time)\\n\",\n            \"enum\": [\n              \"PRE\",\n              \"POL\",\n              \"POD\",\n              \"PDE\",\n              \"PCF\",\n              \"PSR\",\n              \"OIR\",\n              \"DRL\",\n              \"ORI\",\n              \"IEL\",\n              \"PTP\",\n              \"RTP\",\n              \"FCD\",\n              \"ECP\"\n            ]\n          },\n          \"eventDateTime\": {\n            \"type\": \"string\",\n            \"description\": \"A date when the event is taking place at the location\\n\",\n            \"format\": \"date-time\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "BKG_SPEC_VERSION",
			"value": "2.0.0",
			"type": "default"
		},
		{
			"key": "EBL_SPEC_VERSION",
			"value": "3.0.0",
			"type": "default"
		},
		{
			"key": "BOOKING_RESPONSE_SCHEMA",
			"value": "{\"required\":[\"bookingRequestCreatedDateTime\",\"bookingRequestUpdatedDateTime\",\"carrierBookingRequestReference\",\"documentStatus\"],\"type\":\"object\",\"description\":\"The `carrierBookingRequestReference` along with the `documentStatus` is returned\\n\",\"properties\":{\"carrierBookingRequestReference\":{\"type\":\"string\",\"description\":\"A reference to the booking during the booking request phase\\n\"},\"documentStatus\":{\"type\":\"string\",\"description\":\"The status of the booking. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- CANC (Cancelled)\\n- CMPL (Completed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\"enum\":[\"RECE\",\"PENU\",\"PENC\",\"CONF\",\"REJE\",\"CANC\",\"CMPL\"]},\"bookingRequestCreatedDateTime\":{\"type\":\"string\",\"description\":\"The date and time when the booking request was created\\n\",\"format\":\"date-time\"},\"bookingRequestUpdatedDateTime\":{\"type\":\"string\",\"description\":\"Last date and time when the booking request was updated\\n\",\"format\":\"date-time\"}}}",
			"type": "default"
		},
		{
			"key": "SHIPPING_INSTRUCTION_RESPONSE_SCHEMA",
			"value": "{\"required\":[\"documentStatus\",\"shippingInstructionCreatedDateTime\",\"shippingInstructionReference\",\"shippingInstructionUpdatedDateTime\"],\"type\":\"object\",\"description\":\"The `shippingInstructionReference` along with the `documentStatus`, created and updated timestamps is returned\\n\",\"properties\":{\"shippingInstructionReference\":{\"maxLength\":100,\"type\":\"string\",\"description\":\"The identifier for a shipping instruction provided by the carrier for system purposes.\\n\"},\"documentStatus\":{\"type\":\"string\",\"description\":\"The status of the Bill of Lading. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- DRFT (Draft)\\n- PENA (Pending Approval)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- VOID (Void)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\"enum\":[\"RECE\",\"PENU\",\"DRFT\",\"PENA\",\"APPR\",\"ISSU\",\"SURR\",\"VOID\"]},\"shippingInstructionCreatedDateTime\":{\"type\":\"string\",\"description\":\"Date and time when the ShippingInstruction was created\\n\",\"format\":\"date-time\"},\"shippingInstructionUpdatedDateTime\":{\"type\":\"string\",\"description\":\"Date and time when the ShippingInstruction was updated\\n\",\"format\":\"date-time\"}}}",
			"type": "string"
		},
		{
			"key": "SHIPMENT_RESPONSE_SCHEMA",
			"value": "{\n  \"required\": [\n    \"booking\",\n    \"carrierBookingReference\",\n    \"shipmentCreatedDateTime\",\n    \"transports\"\n  ],\n  \"type\": \"object\",\n  \"description\": \"Shipment\\n\",\n  \"properties\": {\n    \"carrierBookingReference\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"A set of unique characters provided by carrier to identify a booking.\"\n    },\n    \"shipmentCreatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"The date and time when the shipment was created (equivalent to when the Booking was confirmed).\\n\",\n      \"format\": \"date-time\"\n    },\n    \"shipmentUpdatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"Last date and time when the Shipment was updated.\\n\",\n      \"format\": \"date-time\"\n    },\n    \"termsAndConditions\": {\n      \"type\": \"string\",\n      \"description\": \"Carrier general terms and conditions for the booking.\\n\"\n    },\n    \"booking\": {\n      \"type\": \"object\",\n      \"description\": \"includes the information requested in a booking, service terms and types as well as the assigned booking reference by the carrier.\\n\",\n      \"required\": [\n        \"bookingRequestCreatedDateTime\",\n        \"bookingRequestUpdatedDateTime\",\n        \"cargoMovementTypeAtDestination\",\n        \"cargoMovementTypeAtOrigin\",\n        \"carrierBookingRequestReference\",\n        \"requestedEquipments\",\n        \"communicationChannelCode\",\n        \"deliveryTypeAtDestination\",\n        \"documentStatus\",\n        \"isEquipmentSubstitutionAllowed\",\n        \"isExportDeclarationRequired\",\n        \"isImportLicenseRequired\",\n        \"isPartialLoadAllowed\",\n        \"receiptTypeAtOrigin\"\n      ],\n      \"properties\": {\n        \"carrierBookingRequestReference\": {\n          \"type\": \"string\",\n          \"description\": \"A reference to the booking during the booking request phase\\n\"\n        },\n        \"documentStatus\": {\n          \"type\": \"string\",\n          \"description\": \"The status of the booking. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- PENC (Pending Confirmation)\\n- CONF (Confirmed)\\n- REJE (Rejected)\\n- CANC (Cancelled)\\n- CMPL (Completed)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\n          \"enum\": [\n            \"RECE\",\n            \"PENU\",\n            \"PENC\",\n            \"CONF\",\n            \"REJE\",\n            \"CANC\",\n            \"CMPL\"\n          ]\n        },\n        \"bookingRequestCreatedDateTime\": {\n          \"type\": \"string\",\n          \"description\": \"The date and time when the booking request was created\\n\",\n          \"format\": \"date-time\"\n        },\n        \"bookingRequestUpdatedDateTime\": {\n          \"type\": \"string\",\n          \"description\": \"Last date and time when the booking request was updated\\n\",\n          \"format\": \"date-time\"\n        },\n        \"receiptTypeAtOrigin\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n          \"enum\": [\n            \"CY\",\n            \"SD\",\n            \"CFS\"\n          ]\n        },\n        \"deliveryTypeAtDestination\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n          \"enum\": [\n            \"CY\",\n            \"SD\",\n            \"CFS\"\n          ]\n        },\n        \"cargoMovementTypeAtOrigin\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n          \"enum\": [\n            \"FCL\",\n            \"LCL\",\n            \"BB\"\n          ]\n        },\n        \"cargoMovementTypeAtDestination\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n          \"enum\": [\n            \"FCL\",\n            \"LCL\",\n            \"BB\"\n          ]\n        },\n        \"serviceContractReference\": {\n          \"maxLength\": 30,\n          \"type\": \"string\",\n          \"description\": \"Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.\"\n        },\n        \"vesselName\": {\n          \"maxLength\": 35,\n          \"type\": \"string\",\n          \"description\": \"The name of the Vessel given by the Vessel Operator and registered with IMO.\\n\"\n        },\n        \"carrierExportVoyageNumber\": {\n          \"maxLength\": 50,\n          \"type\": \"string\",\n          \"description\": \"The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.\\n\"\n        },\n        \"universalExportVoyageReference\": {\n          \"pattern\": \"\\\\d{2}[0-9A-Z]{2}[NEWS]\",\n          \"type\": \"string\",\n          \"description\": \"A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\\\d{2}[0-9A-Z]{2}[NEWS]`\\n- `2 digits` for the year\\n- `2 alphanumeric characters` for the sequence number of the voyage\\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\\n\"\n        },\n        \"declaredValue\": {\n          \"type\": \"number\",\n          \"description\": \"The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and \\\"Ad Valorem\\\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\"\n        },\n        \"declaredValueCurrency\": {\n          \"maxLength\": 3,\n          \"type\": \"string\",\n          \"description\": \"The currency used for the declared value, using the 3-character code defined by ISO 4217.\"\n        },\n        \"paymentTermCode\": {\n          \"type\": \"string\",\n          \"description\": \"Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\\n- PRE (Prepaid)\\n- COL (Collect)\\n\",\n          \"enum\": [\n            \"PRE\",\n            \"COL\"\n          ]\n        },\n        \"isPartialLoadAllowed\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.\\n\"\n        },\n        \"isExportDeclarationRequired\": {\n          \"type\": \"boolean\",\n          \"description\": \"Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.\\n\"\n        },\n        \"exportDeclarationReference\": {\n          \"maxLength\": 35,\n          \"type\": \"string\",\n          \"description\": \"A government document permitting designated goods to be shipped out of the country.  Reference number assigned by an issuing authority to an Export License. The export license must be valid at time of departure. Required if Export declaration required is ÔÇÿTrueÔÇÖ.\\n\"\n        },\n        \"isImportLicenseRequired\": {\n          \"type\": \"boolean\",\n          \"description\": \"Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.\\n\"\n        },\n        \"importLicenseReference\": {\n          \"maxLength\": 35,\n          \"type\": \"string\",\n          \"description\": \"A certificate, issued by countries exercising import controls, that permits importation of the articles stated in the license. Reference number assigned by an issuing authority to an Import License. The import license number must be valid at time of arrival. Required if import license required is ÔÇÿTrueÔÇÖ.\\n\"\n        },\n        \"isAMSACIFilingRequired\": {\n          \"type\": \"boolean\",\n          \"description\": \"Customs filing for US (AMS) or Canadian (ACI) customs\\n\"\n        },\n        \"isDestinationFilingRequired\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates whether the shipper will perform the AMS/ACI filing directly or not. Mandatory if AMS/ACI filing is required\\n\"\n        },\n        \"contractQuotationReference\": {\n          \"maxLength\": 35,\n          \"type\": \"string\",\n          \"description\": \"Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.\\n\"\n        },\n        \"expectedDepartureDate\": {\n          \"type\": \"string\",\n          \"description\": \"The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent. If vessel/voyage or expected date of arrival is not provided, this is mandatory\\n\"\n        },\n        \"expectedArrivalAtPlaceOfDeliveryStartDate\": {\n          \"type\": \"string\",\n          \"description\": \"The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryEndDate`\\n\"\n        },\n        \"expectedArrivalAtPlaceOfDeliveryEndDate\": {\n          \"type\": \"string\",\n          \"description\": \"The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryStartDate`\\n\"\n        },\n        \"transportDocumentTypeCode\": {\n          \"type\": \"string\",\n          \"description\": \"Specifies the type of the transport document\\n- BOL (Bill of Lading)\\n- SWB (Sea Waybill)\\n\",\n          \"enum\": [\n            \"BOL\",\n            \"SWB\"\n          ]\n        },\n        \"transportDocumentReference\": {\n          \"maxLength\": 20,\n          \"type\": \"string\",\n          \"description\": \"A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\\n\"\n        },\n        \"bookingChannelReference\": {\n          \"maxLength\": 20,\n          \"type\": \"string\",\n          \"description\": \"Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other. Conditional on booking channel being used\\n\"\n        },\n        \"incoTerms\": {\n          \"type\": \"string\",\n          \"description\": \"Transport obligations, costs and risks as agreed between buyer and seller.\\n- FCA (Free Carrier)\\n- FOB (Free on Board)\\n\",\n          \"enum\": [\n            \"FCA\",\n            \"FOB\"\n          ]\n        },\n        \"communicationChannelCode\": {\n          \"maxLength\": 2,\n          \"type\": \"string\",\n          \"description\": \"Specifying which communication channel is to be used for this booking e.g.\\n- EI (EDI transmission)\\n- EM (Email)\\n- AO (API)\\n\",\n          \"enum\": [\n            \"EI\",\n            \"EM\",\n            \"AO\"\n          ]\n        },\n        \"isEquipmentSubstitutionAllowed\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if an alternate equipment type can be provided by the carrier.\\n\"\n        },\n        \"vesselIMONumber\": {\n          \"maxLength\": 7,\n          \"type\": \"string\",\n          \"description\": \"The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\\n\"\n        },\n        \"preCarriageModeOfTransportCode\": {\n          \"type\": \"string\",\n          \"description\": \"The mode of transport as defined by DCSA.\\n\",\n          \"enum\": [\n            \"VESSEL\",\n            \"RAIL\",\n            \"TRUCK\",\n            \"BARGE\"\n          ]\n        },\n        \"invoicePayableAt\": {\n          \"anyOf\": [\n            {\n              \"required\": [\n                \"address\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using an `Address` object\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"address\": {\n                  \"description\": \"Address related information\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the address\"\n                    },\n                    \"street\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                    },\n                    \"streetNumber\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                    },\n                    \"floor\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The floor of the partyÔÇÖs street number.\"\n                    },\n                    \"postCode\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The post code of the partyÔÇÖs address.\"\n                    },\n                    \"city\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The city name of the partyÔÇÖs address.\"\n                    },\n                    \"stateRegion\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The state/region of the partyÔÇÖs address.\"\n                    },\n                    \"country\": {\n                      \"maxLength\": 75,\n                      \"type\": \"string\",\n                      \"description\": \"The country of the partyÔÇÖs address.\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"UNLocationCode\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                }\n              }\n            }\n          ],\n          \"description\": \"General purpose object to capture `Invoice Payable At` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\"\n        },\n        \"placeOfBLIssue\": {\n          \"anyOf\": [\n            {\n              \"required\": [\n                \"address\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using an `Address` object\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"address\": {\n                  \"description\": \"Address related information\",\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"name\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"Name of the address\"\n                    },\n                    \"street\": {\n                      \"maxLength\": 100,\n                      \"type\": \"string\",\n                      \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                    },\n                    \"streetNumber\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                    },\n                    \"floor\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The floor of the partyÔÇÖs street number.\"\n                    },\n                    \"postCode\": {\n                      \"maxLength\": 50,\n                      \"type\": \"string\",\n                      \"description\": \"The post code of the partyÔÇÖs address.\"\n                    },\n                    \"city\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The city name of the partyÔÇÖs address.\"\n                    },\n                    \"stateRegion\": {\n                      \"maxLength\": 65,\n                      \"type\": \"string\",\n                      \"description\": \"The state/region of the partyÔÇÖs address.\"\n                    },\n                    \"country\": {\n                      \"maxLength\": 75,\n                      \"type\": \"string\",\n                      \"description\": \"The country of the partyÔÇÖs address.\"\n                    }\n                  }\n                }\n              }\n            },\n            {\n              \"required\": [\n                \"UNLocationCode\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n              \"properties\": {\n                \"locationName\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the location.\"\n                },\n                \"UNLocationCode\": {\n                  \"maxLength\": 5,\n                  \"type\": \"string\",\n                  \"description\": \"The UN Location code specifying where the place is located.\"\n                }\n              }\n            }\n          ],\n          \"description\": \"General purpose object to capture `Place of B/L Issue` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\\nThe location where the original transport document (`Bill of Lading`) will be issued.\\n\"\n        },\n        \"references\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"type\",\n              \"value\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\",\n            \"properties\": {\n              \"type\": {\n                \"type\": \"string\",\n                \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight ForwarderÔÇÖs Reference)\\n- SI (ShipperÔÇÖs Reference)\\n- PO (Purchase Order Reference)\\n- CR (CustomerÔÇÖs Reference)\\n- AAO (ConsigneeÔÇÖs Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n- RUC (Registro ├Ünico del Contribuyente)\\n- DUE (Declara├º├úo ├Ünica de Exporta├º├úo)\\n- CER (Canadian Export Reporting System)\\n- AES (Automated Export System)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv). Be aware that the list is a subset of the possible values.\\n\",\n                \"enum\": [\n                  \"FF\",\n                  \"SI\",\n                  \"PO\",\n                  \"CR\",\n                  \"AAO\",\n                  \"ECR\",\n                  \"CSI\",\n                  \"BPR\",\n                  \"BID\",\n                  \"RUC\",\n                  \"DUE\",\n                  \"CER\",\n                  \"AES\"\n                ]\n              },\n              \"value\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The actual value of the reference.\"\n              }\n            }\n          }\n        },\n        \"requestedEquipments\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"isShipperOwned\",\n              \"units\",\n              \"commodities\"\n            ],\n            \"type\": \"object\",\n            \"properties\": {\n              \"ISOEquipmentCode\": {\n                \"maxLength\": 4,\n                \"type\": \"string\"\n              },\n              \"tareWeight\": {\n                \"type\": \"number\"\n              },\n              \"units\": {\n                \"type\": \"integer\"\n              },\n              \"commodities\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"required\": [\n                    \"cargoGrossWeight\",\n                    \"cargoGrossWeightUnit\",\n                    \"commodityType\"\n                  ],\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"commodityType\": {\n                      \"maxLength\": 550,\n                      \"type\": \"string\"\n                    },\n                    \"HSCode\": {\n                      \"maxLength\": 10,\n                      \"type\": \"string\"\n                    },\n                    \"cargoGrossWeight\": {\n                      \"type\": \"number\"\n                    },\n                    \"cargoGrossWeightUnit\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"KGM\",\n                        \"LBR\"\n                      ]\n                    },\n                    \"cargoGrossVolume\": {\n                      \"type\": \"number\"\n                    },\n                    \"cargoGrossVolumeUnit\": {\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"MTQ\",\n                        \"FTQ\"\n                      ]\n                    },\n                    \"numberOfPackages\": {\n                      \"type\": \"integer\"\n                    },\n                    \"exportLicenseIssueDate\": {\n                      \"type\": \"string\"\n                    },\n                    \"exportLicenseExpiryDate\": {\n                      \"type\": \"string\"\n                    }\n                  }\n                }\n              },\n              \"equipmentReferences\": {\n                \"type\": \"array\",\n                \"description\": \"An equipment to be used by the shipper if known at the time of booking\\n\",\n                \"items\": {\n                  \"required\": [\n                    \"equipmentReference\"\n                  ],\n                  \"type\": \"object\",\n                  \"description\": \"used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' Dry Freight Container, but several different versions exist.\\n\",\n                  \"properties\": {\n                    \"equipmentReference\": {\n                      \"maxLength\": 15,\n                      \"type\": \"string\",\n                      \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n                    },\n                    \"ISOEquipmentCode\": {\n                      \"maxLength\": 4,\n                      \"type\": \"string\",\n                      \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n                    },\n                    \"tareWeight\": {\n                      \"type\": \"number\",\n                      \"description\": \"The weight of an empty container (gross container weight).\"\n                    },\n                    \"weightUnit\": {\n                      \"type\": \"string\",\n                      \"description\": \"The unit of measure which can be expressed in imperial or metric terms\\n- KGM (Kilograms)\\n- LBR (Pounds)\\n\",\n                      \"enum\": [\n                        \"KGM\",\n                        \"LBR\"\n                      ]\n                    }\n                  }\n                }\n              },\n              \"isShipperOwned\": {\n                \"type\": \"boolean\",\n                \"description\": \"Indicates whether the container is shipper owned (SOC).\"\n              },\n              \"activeReeferSettings\": {\n                \"required\": [\n                  \"type\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"The specifications for a Reefer equipment. If this object is provided then the equipment linked to this Reefer object should be concidered an **Operated Reefer**.\\n\\nIf not provided the equipment should be concidered a **Non Operated Reefer** in case the `ISOEquipmentCode` indicates a reefer container.\\n\",\n                \"oneOf\": [\n                  {\n                    \"required\": [\n                      \"isColdTreatmentRequired\",\n                      \"isGeneratorSetRequired\",\n                      \"isHighValueCargo\",\n                      \"isHotStuffingAllowed\",\n                      \"isMonitoringRequired\",\n                      \"isPreCoolingRequired\",\n                      \"isTracingRequired\",\n                      \"temperatureSetpoint\",\n                      \"type\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"The settings for a `Freezer` reefer. Needs temperature setting less than 0-degree Centigrade. Frozen fish, meat, etc. are examples of such categories.\\n\\n**Ventilation orifice** and **drainHoles** are **always** closed\\n\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The type of the reefer - for a `Freezer` this must be `FREZ`\\n\",\n                        \"enum\": [\n                          \"FREZ\"\n                        ]\n                      },\n                      \"productName\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"Carrier specific selection box specifying individual commercial product categories ÔÇô Optional Field? Probably not standardise product names ÔÇô Carriers specific\\n\"\n                      },\n                      \"isGeneratorSetRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should have a generator set attached at time of release from depot\\n\"\n                      },\n                      \"isPreCoolingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot\\n\"\n                      },\n                      \"isColdTreatmentRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\\n\"\n                      },\n                      \"isHotStuffingAllowed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo can be stuffed without having the proper temperature\\n\"\n                      },\n                      \"isHighValueCargo\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Cargo value exceeds USD XXX K (carrier specific)\\n\"\n                      },\n                      \"isTracingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"IOT device enabled/attached\\n\"\n                      },\n                      \"isMonitoringRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Monitoring of temperature while the container is being transported\\n\"\n                      },\n                      \"extraMaterial\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"e.g. paper, cardboard etc.\\n\"\n                      },\n                      \"temperatureSetpoint\": {\n                        \"type\": \"number\",\n                        \"description\": \"Target value of the temperature for the Reefer based on the cargo requirement. The temperature is specified in in &deg;C (Celsius)\\n\"\n                      }\n                    }\n                  },\n                  {\n                    \"required\": [\n                      \"isCargoProbe1Required\",\n                      \"isCargoProbe2Required\",\n                      \"isCargoProbe3Required\",\n                      \"isCargoProbe4Required\",\n                      \"isColdTreatmentRequired\",\n                      \"isGeneratorSetRequired\",\n                      \"isHighValueCargo\",\n                      \"isHotStuffingAllowed\",\n                      \"isMonitoringRequired\",\n                      \"isPreCoolingRequired\",\n                      \"isTracingRequired\",\n                      \"temperatureSetpoint\",\n                      \"type\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"The settings for a `SuperFreezer` reefer, exceptional high performance, create and maintain ultra-low temperatures as low as -70┬░C to -30C to +50C to protect the most sensitive and valuable cargoes.\\n\\n**Ventilation orifice** and **drainHoles** are **always** closed\\n\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The type of the reefer - for a `Super freezer` this must be `SUPR`\\n\",\n                        \"enum\": [\n                          \"SUPR\"\n                        ]\n                      },\n                      \"productName\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"Carrier specific selection box specifying individual commercial product categories ÔÇô Optional Field? Probably not standardise product names ÔÇô Carriers specific\\n\"\n                      },\n                      \"isGeneratorSetRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should have a generator set attached at time of release from depot\\n\"\n                      },\n                      \"isPreCoolingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot\\n\"\n                      },\n                      \"isColdTreatmentRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\\n\"\n                      },\n                      \"isHotStuffingAllowed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo can be stuffed without having the proper temperature\\n\"\n                      },\n                      \"isHighValueCargo\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Cargo value exceeds USD XXX K (carrier specific)\\n\"\n                      },\n                      \"isCargoProbe1Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 1 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe2Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 2 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe3Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 3 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe4Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 4 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isTracingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"IOT device enabled/attached\\n\"\n                      },\n                      \"isMonitoringRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Monitoring of temperature while the container is being transported\\n\"\n                      },\n                      \"extraMaterial\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"e.g. paper, cardboard etc.\\n\"\n                      },\n                      \"temperatureSetpoint\": {\n                        \"type\": \"number\",\n                        \"description\": \"Target value of the temperature for the Reefer based on the cargo requirement. The temperature is specified in in &deg;C (Celsius)\\n\"\n                      }\n                    }\n                  },\n                  {\n                    \"required\": [\n                      \"isBulbMode\",\n                      \"isCargoProbe1Required\",\n                      \"isCargoProbe2Required\",\n                      \"isCargoProbe3Required\",\n                      \"isCargoProbe4Required\",\n                      \"isColdTreatmentRequired\",\n                      \"isDrainholesOpen\",\n                      \"isGeneratorSetRequired\",\n                      \"isHighValueCargo\",\n                      \"isHotStuffingAllowed\",\n                      \"isMonitoringRequired\",\n                      \"isPreCoolingRequired\",\n                      \"isTracingRequired\",\n                      \"isVentilationOpen\",\n                      \"setpoints\",\n                      \"type\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"The settings for a `Refridgerated` reefer. Refrigerated reefer is for Cargo which preset temperature exceeds 0-degree Centigrade and is not frozen.\\n\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The type of the reefer - for a `Refrigerated` this must be `REFR`\\n\",\n                        \"enum\": [\n                          \"REFR\"\n                        ]\n                      },\n                      \"productName\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"Carrier specific selection box specifying individual commercial product categories ÔÇô Optional Field? Probably not standardise product names ÔÇô Carriers specific\\n\"\n                      },\n                      \"isGeneratorSetRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should have a generator set attached at time of release from depot\\n\"\n                      },\n                      \"isPreCoolingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot\\n\"\n                      },\n                      \"isColdTreatmentRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\\n\"\n                      },\n                      \"isHotStuffingAllowed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo can be stuffed without having the proper temperature\\n\"\n                      },\n                      \"isHighValueCargo\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Cargo value exceeds USD XXX K (carrier specific)\\n\"\n                      },\n                      \"isVentilationOpen\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`\\n\"\n                      },\n                      \"isCargoProbe1Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 1 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe2Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 2 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe3Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 3 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe4Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 4 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isDrainholesOpen\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is drainoles open on the container.\\n\"\n                      },\n                      \"isBulbMode\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is special container setting for handling flower bulbs active\\n\"\n                      },\n                      \"isTracingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"IOT device enabled/attached\\n\"\n                      },\n                      \"isMonitoringRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Monitoring of temperature while the container is being transported\\n\"\n                      },\n                      \"extraMaterial\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"e.g. paper, cardboard etc.\\n\"\n                      },\n                      \"setpoints\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"description\": \"\",\n                          \"properties\": {\n                            \"temperature\": {\n                              \"type\": \"number\",\n                              \"description\": \"Target value of the temperature for the Reefer based on the cargo requirement. The temperature is specified in in &deg;C (Celsius)\\n\"\n                            },\n                            \"humidity\": {\n                              \"type\": \"number\",\n                              \"description\": \"The percentage of the controlled atmosphere humidity target value\\n\"\n                            },\n                            \"airExchange\": {\n                              \"type\": \"number\",\n                              \"description\": \"Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container in MQH (Cubic Meters per Hour)\\n\"\n                            },\n                            \"daysPriorToDischarge\": {\n                              \"type\": \"number\",\n                              \"description\": \"Number of days prior to arrival at Port of Discharge.\\n\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  },\n                  {\n                    \"required\": [\n                      \"isCargoProbe1Required\",\n                      \"isCargoProbe2Required\",\n                      \"isCargoProbe3Required\",\n                      \"isCargoProbe4Required\",\n                      \"isColdTreatmentRequired\",\n                      \"isGeneratorSetRequired\",\n                      \"isHighValueCargo\",\n                      \"isHotStuffingAllowed\",\n                      \"isMonitoringRequired\",\n                      \"isPreCoolingRequired\",\n                      \"isTracingRequired\",\n                      \"setpoints\",\n                      \"type\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"The settings for a `Controlled Atmosphere` reefer. Containers use advanced technology for atmosphere control by regulating carbon dioxide, oxygen and nitrogen levels to help slow down ripening, preserving perishable produce and vastly improving its shelf life especially during long-distance trips.\\n\\n**Ventilation orifice* and **drainHoles** are **always** closed\\n\",\n                    \"properties\": {\n                      \"type\": {\n                        \"type\": \"string\",\n                        \"description\": \"The type of the reefer - for a `Controlled Atmosphere` this must be `CONA`\\n\",\n                        \"enum\": [\n                          \"CONA\"\n                        ]\n                      },\n                      \"productName\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"Carrier specific selection box specifying individual commercial product categories ÔÇô Optional Field? Probably not standardise product names ÔÇô Carriers specific\\n\"\n                      },\n                      \"isGeneratorSetRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should have a generator set attached at time of release from depot\\n\"\n                      },\n                      \"isPreCoolingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot\\n\"\n                      },\n                      \"isColdTreatmentRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD\\n\"\n                      },\n                      \"isHotStuffingAllowed\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Indicator whether cargo can be stuffed without having the proper temperature\\n\"\n                      },\n                      \"isHighValueCargo\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Cargo value exceeds USD XXX K (carrier specific)\\n\"\n                      },\n                      \"isCargoProbe1Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 1 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe2Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 2 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe3Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 3 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isCargoProbe4Required\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Is `Cargo Probe 4 Required` enabled allowing the container to emit temperatures.\\n\"\n                      },\n                      \"isTracingRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"IOT device enabled/attached\\n\"\n                      },\n                      \"isMonitoringRequired\": {\n                        \"type\": \"boolean\",\n                        \"description\": \"Monitoring of temperature while the container is being transported\\n\"\n                      },\n                      \"extraMaterial\": {\n                        \"maxLength\": 500,\n                        \"type\": \"string\",\n                        \"description\": \"e.g. paper, cardboard etc.\\n\"\n                      },\n                      \"setpoints\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"description\": \"\",\n                          \"properties\": {\n                            \"temperature\": {\n                              \"type\": \"number\",\n                              \"description\": \"Target value of the temperature for the Reefer based on the cargo requirement. The temperature is specified in in &deg;C (Celsius)\\n\"\n                            },\n                            \"o2\": {\n                              \"type\": \"number\",\n                              \"description\": \"The percentage of the controlled atmosphere O<sub>2</sub> target value\\n\"\n                            },\n                            \"co2\": {\n                              \"type\": \"number\",\n                              \"description\": \"The percentage of the controlled atmosphere CO<sub>2</sub> target value\\n\"\n                            },\n                            \"humidity\": {\n                              \"type\": \"number\",\n                              \"description\": \"The percentage of the controlled atmosphere humidity target value\\n\"\n                            },\n                            \"airExchange\": {\n                              \"type\": \"number\",\n                              \"description\": \"Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container in MQH (Cubic Meters per Hour)\\n\"\n                            },\n                            \"daysPriorToDischarge\": {\n                              \"type\": \"number\",\n                              \"description\": \"Number of days prior to arrival at Port of Discharge.\\n\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        },\n        \"documentParties\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"isToBeNotified\",\n              \"party\",\n              \"partyFunction\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"stores the parties involved in the transport document.\",\n            \"properties\": {\n              \"party\": {\n                \"required\": [\n                  \"partyContactDetails\",\n                  \"partyName\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"refers to a company or a legal entity.\",\n                \"properties\": {\n                  \"partyName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the party.\"\n                  },\n                  \"taxReference1\": {\n                    \"maxLength\": 20,\n                    \"type\": \"string\",\n                    \"description\": \"The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n                  },\n                  \"taxReference2\": {\n                    \"maxLength\": 20,\n                    \"type\": \"string\",\n                    \"description\": \"Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n                  },\n                  \"publicKey\": {\n                    \"maxLength\": 500,\n                    \"type\": \"string\",\n                    \"description\": \"The public key used for a digital signature.\"\n                  },\n                  \"address\": {\n                    \"type\": \"object\",\n                    \"description\": \"An object for storing address related information\\n\",\n                    \"properties\": {\n                      \"name\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"Name of the address\"\n                      },\n                      \"street\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                      },\n                      \"streetNumber\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                      },\n                      \"floor\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The floor of the partyÔÇÖs street number.\"\n                      },\n                      \"postCode\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The post code of the partyÔÇÖs address.\"\n                      },\n                      \"city\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The city name of the partyÔÇÖs address.\"\n                      },\n                      \"stateRegion\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The state/region of the partyÔÇÖs address.\"\n                      },\n                      \"country\": {\n                        \"maxLength\": 75,\n                        \"type\": \"string\",\n                        \"description\": \"The country of the partyÔÇÖs address.\"\n                      }\n                    }\n                  },\n                  \"partyContactDetails\": {\n                    \"minItems\": 1,\n                    \"type\": \"array\",\n                    \"description\": \"A list of contact details - the list cannot be empty\\n\",\n                    \"items\": {\n                      \"required\": [\n                        \"name\"\n                      ],\n                      \"type\": \"object\",\n                      \"description\": \"Contact information for a Party\\n\",\n                      \"properties\": {\n                        \"name\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"Name of the contact\"\n                        },\n                        \"phone\": {\n                          \"maxLength\": 30,\n                          \"type\": \"string\",\n                          \"description\": \"Phone number for the contact\"\n                        },\n                        \"email\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"E-mail address for the contact\"\n                        }\n                      }\n                    }\n                  },\n                  \"identifyingCodes\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"required\": [\n                        \"DCSAResponsibleAgencyCode\",\n                        \"partyCode\"\n                      ],\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"DCSAResponsibleAgencyCode\": {\n                          \"type\": \"string\",\n                          \"description\": \"A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\\n- ISO (International Standards Organization)\\n- UNECE (United Nations Economic Commission for Europe)\\n- LLOYD (Lloyd's register of shipping)\\n- BIC (Bureau International des Containeurs)\\n- IMO (International Maritime Organization)\\n- SCAC (Standard Carrier Alpha Code)\\n- ITIGG (International Transport Implementation Guidelines Group)\\n- ITU (International Telecommunication Union)\\n- SMDG (Shipplanning Message Development Group)\\n- EXIS (Exis Technologies Ltd.)\\n- FMC (Federal Maritime Commission)\\n- CBSA (Canada Border Services Agency)\\n- DCSA (Digital Container Shipping Association)\\n- DID (Decentralized Identifier)\\n- LEI (Legal Entity Identifier)\\n- ZZZ (Mutually defined)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).\\n\",\n                          \"enum\": [\n                            \"ISO\",\n                            \"UNECE\",\n                            \"LLOYD\",\n                            \"BIC\",\n                            \"IMO\",\n                            \"SCAC\",\n                            \"ITIGG\",\n                            \"ITU\",\n                            \"SMDG\",\n                            \"EXIS\",\n                            \"FMC\",\n                            \"CBSA\",\n                            \"DCSA\",\n                            \"DID\",\n                            \"LEI\",\n                            \"ZZZ\"\n                          ]\n                        },\n                        \"partyCode\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"Code to identify the party as provided by the agency\\n\"\n                        },\n                        \"codeListName\": {\n                          \"maxLength\": 100,\n                          \"type\": \"string\",\n                          \"description\": \"The name of the list, provided by the responsible agency\\n\"\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              \"partyFunction\": {\n                \"type\": \"string\",\n                \"description\": \"Specifies the role of the party in the context of the given Shipping Instruction.\\n- OS (Original shipper)\\n- CN (Consignee)\\n- COW (Invoice payer on behalf of the consignor (shipper))\\n- COX (Invoice payer on behalf of the consignee)\\n- MS (Document/message issuer/sender)\\n- N1 (First Notify Party)\\n- N2 (Second Notify Party)\\n- NI (Other Notify Party)\\n- DDR (Consignor's freight forwarder)\\n- DDS (Consignee's freight forwarder)\\n- HE (Carrier booking office (transportation office))\\n- SCO (Service contract owner - Defined by DCSA)\\n- BA (Booking Agency)\\n- EBL (EBL Solution Provider)\\n\",\n                \"enum\": [\n                  \"OS\",\n                  \"CN\",\n                  \"COW\",\n                  \"COX\",\n                  \"MS\",\n                  \"N1\",\n                  \"N2\",\n                  \"NI\",\n                  \"DDR\",\n                  \"DDS\",\n                  \"HE\",\n                  \"SCO\",\n                  \"BA\",\n                  \"EBL\"\n                ]\n              },\n              \"displayedAddress\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"maxLength\": 250,\n                  \"type\": \"string\",\n                  \"description\": \"A single address line.\"\n                }\n              },\n              \"isToBeNotified\": {\n                \"type\": \"boolean\",\n                \"description\": \"Used to decide whether the party will be notified of the arrival of the cargo.\"\n              }\n            }\n          }\n        },\n        \"shipmentLocations\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"location\",\n              \"shipmentLocationTypeCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"maps the relationship between Shipment and Location, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`\\n\",\n            \"properties\": {\n              \"location\": {\n                \"anyOf\": [\n                  {\n                    \"required\": [\n                      \"address\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                    \"properties\": {\n                      \"locationName\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the location.\"\n                      },\n                      \"address\": {\n                        \"description\": \"Address related information\",\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"name\": {\n                            \"maxLength\": 100,\n                            \"type\": \"string\",\n                            \"description\": \"Name of the address\"\n                          },\n                          \"street\": {\n                            \"maxLength\": 100,\n                            \"type\": \"string\",\n                            \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                          },\n                          \"streetNumber\": {\n                            \"maxLength\": 50,\n                            \"type\": \"string\",\n                            \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                          },\n                          \"floor\": {\n                            \"maxLength\": 50,\n                            \"type\": \"string\",\n                            \"description\": \"The floor of the partyÔÇÖs street number.\"\n                          },\n                          \"postCode\": {\n                            \"maxLength\": 50,\n                            \"type\": \"string\",\n                            \"description\": \"The post code of the partyÔÇÖs address.\"\n                          },\n                          \"city\": {\n                            \"maxLength\": 65,\n                            \"type\": \"string\",\n                            \"description\": \"The city name of the partyÔÇÖs address.\"\n                          },\n                          \"stateRegion\": {\n                            \"maxLength\": 65,\n                            \"type\": \"string\",\n                            \"description\": \"The state/region of the partyÔÇÖs address.\"\n                          },\n                          \"country\": {\n                            \"maxLength\": 75,\n                            \"type\": \"string\",\n                            \"description\": \"The country of the partyÔÇÖs address.\"\n                          }\n                        }\n                      }\n                    }\n                  },\n                  {\n                    \"required\": [\n                      \"UNLocationCode\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                    \"properties\": {\n                      \"locationName\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the location.\"\n                      },\n                      \"UNLocationCode\": {\n                        \"maxLength\": 5,\n                        \"type\": \"string\",\n                        \"description\": \"The UN Location code specifying where the place is located.\"\n                      }\n                    }\n                  },\n                  {\n                    \"required\": [\n                      \"facilityCode\",\n                      \"facilityCodeListProvider\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                    \"properties\": {\n                      \"locationName\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the location.\"\n                      },\n                      \"UNLocationCode\": {\n                        \"maxLength\": 5,\n                        \"type\": \"string\",\n                        \"description\": \"The UN Location code specifying where the place is located.\"\n                      },\n                      \"facilityCode\": {\n                        \"maxLength\": 6,\n                        \"type\": \"string\",\n                        \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                      },\n                      \"facilityCodeListProvider\": {\n                        \"type\": \"string\",\n                        \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                        \"enum\": [\n                          \"BIC\",\n                          \"SMDG\"\n                        ]\n                      }\n                    }\n                  }\n                ],\n                \"description\": \"General purpose object to capture the location in the `ShipmentLocation`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\"\n              },\n              \"shipmentLocationTypeCode\": {\n                \"type\": \"string\",\n                \"description\": \"Links to the Location Type Code defined by DCSA.\\n- PRE (Place of Receipt)\\n- POL (Port of Loading)\\n- POD (Port of Discharge)\\n- PDE (Place of Delivery)\\n- PCF (Pre-carriage From)\\n- PSR (Pre-carriage under shipperÔÇÖs responsibility)\\n- OIR (Onward In-land Routing)\\n- DRL (Depot release location)\\n- ORI (Origin of goods)\\n- IEL (Container intermediate export stop off location)\\n- PTP (Prohibited transshipment port)\\n- RTP (Requested transshipment port)\\n- FCD (Full container drop-off location)\\n- ECP (Empty container pick-up location)\\n\",\n                \"enum\": [\n                  \"PRE\",\n                  \"POL\",\n                  \"POD\",\n                  \"PDE\",\n                  \"PCF\",\n                  \"PSR\",\n                  \"OIR\",\n                  \"DRL\",\n                  \"ORI\",\n                  \"IEL\",\n                  \"PTP\",\n                  \"RTP\",\n                  \"FCD\",\n                  \"ECP\"\n                ]\n              },\n              \"eventDateTime\": {\n                \"type\": \"string\",\n                \"description\": \"A date when the event is taking place at the location\\n\",\n                \"format\": \"date-time\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"transports\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"dischargeLocation\",\n          \"loadLocation\",\n          \"plannedArrivalDate\",\n          \"plannedDepartureDate\",\n          \"transportPlanStage\",\n          \"transportPlanStageSequenceNumber\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"A list of transports sorted by ShipmentTransport sequenceNumber\",\n        \"properties\": {\n          \"transportPlanStage\": {\n            \"type\": \"string\",\n            \"description\": \"Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport\\n- PRC (Pre-Carriage)\\n- MNC (Main Carriage Transport)\\n- ONC (On-Carriage Transport)\\n\",\n            \"enum\": [\n              \"PRC\",\n              \"MNC\",\n              \"ONC\"\n            ]\n          },\n          \"transportPlanStageSequenceNumber\": {\n            \"type\": \"integer\",\n            \"description\": \"Sequence number of the transport plan stage\\n\"\n          },\n          \"loadLocation\": {\n            \"anyOf\": [\n              {\n                \"required\": [\n                  \"address\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"address\": {\n                    \"description\": \"Address related information\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"name\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"Name of the address\"\n                      },\n                      \"street\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                      },\n                      \"streetNumber\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                      },\n                      \"floor\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The floor of the partyÔÇÖs street number.\"\n                      },\n                      \"postCode\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The post code of the partyÔÇÖs address.\"\n                      },\n                      \"city\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The city name of the partyÔÇÖs address.\"\n                      },\n                      \"stateRegion\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The state/region of the partyÔÇÖs address.\"\n                      },\n                      \"country\": {\n                        \"maxLength\": 75,\n                        \"type\": \"string\",\n                        \"description\": \"The country of the partyÔÇÖs address.\"\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"UNLocationCode\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"facilityCode\",\n                  \"facilityCodeListProvider\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  },\n                  \"facilityCode\": {\n                    \"maxLength\": 6,\n                    \"type\": \"string\",\n                    \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                  },\n                  \"facilityCodeListProvider\": {\n                    \"type\": \"string\",\n                    \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                    \"enum\": [\n                      \"BIC\",\n                      \"SMDG\"\n                    ]\n                  }\n                }\n              }\n            ],\n            \"description\": \"General purpose object to capture the `Load Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\"\n          },\n          \"dischargeLocation\": {\n            \"anyOf\": [\n              {\n                \"required\": [\n                  \"address\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"address\": {\n                    \"description\": \"Address related information\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"name\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"Name of the address\"\n                      },\n                      \"street\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                      },\n                      \"streetNumber\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                      },\n                      \"floor\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The floor of the partyÔÇÖs street number.\"\n                      },\n                      \"postCode\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The post code of the partyÔÇÖs address.\"\n                      },\n                      \"city\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The city name of the partyÔÇÖs address.\"\n                      },\n                      \"stateRegion\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The state/region of the partyÔÇÖs address.\"\n                      },\n                      \"country\": {\n                        \"maxLength\": 75,\n                        \"type\": \"string\",\n                        \"description\": \"The country of the partyÔÇÖs address.\"\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"UNLocationCode\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"facilityCode\",\n                  \"facilityCodeListProvider\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  },\n                  \"facilityCode\": {\n                    \"maxLength\": 6,\n                    \"type\": \"string\",\n                    \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                  },\n                  \"facilityCodeListProvider\": {\n                    \"type\": \"string\",\n                    \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                    \"enum\": [\n                      \"BIC\",\n                      \"SMDG\"\n                    ]\n                  }\n                }\n              }\n            ],\n            \"description\": \"General purpose object to capture the `Discharge Location`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\"\n          },\n          \"plannedDepartureDate\": {\n            \"type\": \"string\",\n            \"description\": \"The planned date of departure.\\n\"\n          },\n          \"plannedArrivalDate\": {\n            \"type\": \"string\",\n            \"description\": \"The planned date of arrival.\\n\"\n          },\n          \"modeOfTransport\": {\n            \"type\": \"string\",\n            \"description\": \"The mode of transport as defined by DCSA.\\n\",\n            \"enum\": [\n              \"VESSEL\",\n              \"RAIL\",\n              \"TRUCK\",\n              \"BARGE\"\n            ]\n          },\n          \"vesselName\": {\n            \"maxLength\": 35,\n            \"type\": \"string\",\n            \"description\": \"The name of the Vessel given by the Vessel Operator and registered with IMO.\\n\"\n          },\n          \"vesselIMONumber\": {\n            \"maxLength\": 7,\n            \"type\": \"string\",\n            \"description\": \"The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel\\n\"\n          },\n          \"carrierImportVoyageNumber\": {\n            \"maxLength\": 50,\n            \"type\": \"string\",\n            \"description\": \"The identifier of an import voyage. The vessel operator-specific identifier of the import Voyage.\\n\"\n          },\n          \"universalImportVoyageReference\": {\n            \"pattern\": \"\\\\d{2}[0-9A-Z]{2}[NEWS]\",\n            \"type\": \"string\",\n            \"description\": \"A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\\\d{2}[0-9A-Z]{2}[NEWS]`\\n- `2 digits` for the year\\n- `2 alphanumeric characters` for the sequence number of the voyage\\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\\n\"\n          },\n          \"carrierExportVoyageNumber\": {\n            \"maxLength\": 50,\n            \"type\": \"string\",\n            \"description\": \"The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage.\\n\"\n          },\n          \"universalExportVoyageReference\": {\n            \"pattern\": \"\\\\d{2}[0-9A-Z]{2}[NEWS]\",\n            \"type\": \"string\",\n            \"description\": \"A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\\\\d{2}[0-9A-Z]{2}[NEWS]`\\n- `2 digits` for the year\\n- `2 alphanumeric characters` for the sequence number of the voyage\\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est or `S`outh).\\n\"\n          },\n          \"isUnderShippersResponsibility\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicator whether mode of transportation for pre-carriage (e.g. truck, barge, rail) is under shipper's responsibility\\n\"\n          }\n        }\n      }\n    },\n    \"shipmentCutOffTimes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"cutOffDateTime\",\n          \"cutOffDateTimeCode\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"Cut off times\\n\",\n        \"properties\": {\n          \"cutOffDateTimeCode\": {\n            \"type\": \"string\",\n            \"description\": \"Code for the cut-off time\\n- DCO (Documentation cut-off)\\n- VCO (VGM cut-off)\\n- FCO (FCL delivery cut-off)\\n- LCO (LCL delivery cut-off)\\n- ECP (Empty container pick-up date and time)\\n- EFC (Earliest full-container delivery date)\\n- AFD (AMS Filing Due date)\\n\",\n            \"enum\": [\n              \"DCO\",\n              \"VCO\",\n              \"FCO\",\n              \"LCO\",\n              \"ECP\",\n              \"EFC\",\n              \"AFD\"\n            ]\n          },\n          \"cutOffDateTime\": {\n            \"type\": \"string\",\n            \"description\": \"Actual cut-off time\\n\",\n            \"format\": \"date-time\"\n          }\n        }\n      }\n    },\n    \"shipmentLocations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"location\",\n          \"shipmentLocationTypeCode\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"maps the relationship between Shipment and Location, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`\\n\",\n        \"properties\": {\n          \"location\": {\n            \"anyOf\": [\n              {\n                \"required\": [\n                  \"address\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using an `Address` object\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"address\": {\n                    \"description\": \"Address related information\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"name\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"Name of the address\"\n                      },\n                      \"street\": {\n                        \"maxLength\": 100,\n                        \"type\": \"string\",\n                        \"description\": \"The name of the street of the partyÔÇÖs address.\"\n                      },\n                      \"streetNumber\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The number of the street of the partyÔÇÖs address.\"\n                      },\n                      \"floor\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The floor of the partyÔÇÖs street number.\"\n                      },\n                      \"postCode\": {\n                        \"maxLength\": 50,\n                        \"type\": \"string\",\n                        \"description\": \"The post code of the partyÔÇÖs address.\"\n                      },\n                      \"city\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The city name of the partyÔÇÖs address.\"\n                      },\n                      \"stateRegion\": {\n                        \"maxLength\": 65,\n                        \"type\": \"string\",\n                        \"description\": \"The state/region of the partyÔÇÖs address.\"\n                      },\n                      \"country\": {\n                        \"maxLength\": 75,\n                        \"type\": \"string\",\n                        \"description\": \"The country of the partyÔÇÖs address.\"\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"UNLocationCode\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  }\n                }\n              },\n              {\n                \"required\": [\n                  \"facilityCode\",\n                  \"facilityCodeListProvider\"\n                ],\n                \"type\": \"object\",\n                \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n                \"properties\": {\n                  \"locationName\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the location.\"\n                  },\n                  \"UNLocationCode\": {\n                    \"maxLength\": 5,\n                    \"type\": \"string\",\n                    \"description\": \"The UN Location code specifying where the place is located.\"\n                  },\n                  \"facilityCode\": {\n                    \"maxLength\": 6,\n                    \"type\": \"string\",\n                    \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n                  },\n                  \"facilityCodeListProvider\": {\n                    \"type\": \"string\",\n                    \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                    \"enum\": [\n                      \"BIC\",\n                      \"SMDG\"\n                    ]\n                  }\n                }\n              }\n            ],\n            \"description\": \"General purpose object to capture the location in the `ShipmentLocation`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\\n\"\n          },\n          \"displayedName\": {\n            \"maxLength\": 250,\n            \"type\": \"string\",\n            \"description\": \"The address of the Party to be displayed on the transport document.\"\n          },\n          \"shipmentLocationTypeCode\": {\n            \"type\": \"string\",\n            \"description\": \"Links to the Location Type Code defined by DCSA.\\n- PRE (Place of Receipt)\\n- POL (Port of Loading)\\n- POD (Port of Discharge)\\n- PDE (Place of Delivery)\\n- PCF (Pre-carriage From)\\n- PSR (Pre-carriage under shipperÔÇÖs responsibility)\\n- OIR (Onward In-land Routing)\\n- DRL (Depot release location)\\n- ORI (Origin of goods)\\n- IEL (Container intermediate export stop off location)\\n- PTP (Prohibited transshipment port)\\n- RTP (Requested transshipment port)\\n- FCD (Full container drop-off location)\\n- ECP (Empty container pick-up location)\\n\",\n            \"enum\": [\n              \"PRE\",\n              \"POL\",\n              \"POD\",\n              \"PDE\",\n              \"PCF\",\n              \"PSR\",\n              \"OIR\",\n              \"DRL\",\n              \"ORI\",\n              \"IEL\",\n              \"PTP\",\n              \"RTP\",\n              \"FCD\",\n              \"ECP\"\n            ]\n          },\n          \"eventDateTime\": {\n            \"type\": \"string\",\n            \"description\": \"A date when the event is taking place at the location\\n\"\n          }\n        }\n      }\n    },\n    \"confirmedEquipments\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"confirmedEquipmentUnits\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"The confirmed equipments for the booking\\n\",\n        \"properties\": {\n          \"ISOEquipmentCode\": {\n            \"maxLength\": 4,\n            \"type\": \"string\",\n            \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n          },\n          \"units\": {\n            \"type\": \"integer\",\n            \"description\": \"Number of confirmed equipment units\\n\"\n          }\n        }\n      }\n    },\n    \"charges\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"calculationBasis\",\n          \"\",\n          \"currencyAchargeTypemount\",\n          \"currencyCode\",\n          \"paymentTermCode\",\n          \"quantity\",\n          \"unitPrice\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"addresses the monetary value of freight and other service charges for a transport document.\\n\",\n        \"properties\": {\n          \"chargeName\": {\n            \"maxLength\": 50,\n            \"type\": \"string\",\n            \"description\": \"Free text field describing the charge type to apply\\n\"\n          },\n          \"currencyAmount\": {\n            \"type\": \"number\",\n            \"description\": \"The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\"\n          },\n          \"currencyCode\": {\n            \"maxLength\": 3,\n            \"type\": \"string\",\n            \"description\": \"The currency for the charge, using a 3-character code (ISO 4217).\"\n          },\n          \"paymentTermCode\": {\n            \"type\": \"string\",\n            \"description\": \"Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\\n- PRE (Prepaid)\\n- COL (Collect)\\n\",\n            \"enum\": [\n              \"PRE\",\n              \"COL\"\n            ]\n          },\n          \"calculationBasis\": {\n            \"maxLength\": 50,\n            \"type\": \"string\",\n            \"description\": \"The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\"\n          },\n          \"unitPrice\": {\n            \"type\": \"number\",\n            \"description\": \"The unit price of this charge item in the currency of the charge.\"\n          },\n          \"quantity\": {\n            \"type\": \"number\",\n            \"description\": \"The amount of unit for this charge item.\"\n          }\n        }\n      }\n    },\n    \"carrierClauses\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"description\": \"comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.\\n\",\n        \"properties\": {\n          \"clauseContent\": {\n            \"type\": \"string\",\n            \"description\": \"The content of the clause.\"\n          }\n        }\n      }\n    }\n  }\n}",
			"type": "string"
		},
		{
			"key": "TRANSPORT_DOCUMENT_RESPONSE_SCHEMA",
			"value": "{\n  \"required\": [\n    \"carrierCode\",\n    \"carrierCodeListProvider\",\n    \"issuingParty\",\n    \"transportDocumentReference\",\n    \"consignmentItems\",\n    \"documentStatus\",\n    \"isElectronic\",\n    \"isToOrder\"\n  ],\n  \"type\": \"object\",\n  \"description\": \"The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:\\n- Bill of Lading\\n- Sea Waybill. \\n\",\n  \"properties\": {\n    \"transportDocumentReference\": {\n      \"maxLength\": 20,\n      \"type\": \"string\",\n      \"description\": \"A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.\\n\"\n    },\n    \"transportDocumentCreatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"Date and time when the TransportDocument was created\\n\",\n      \"format\": \"date-time\"\n    },\n    \"transportDocumentUpdatedDateTime\": {\n      \"type\": \"string\",\n      \"description\": \"Date and time when the TransportDocument was updated\\n\",\n      \"format\": \"date-time\"\n    },\n    \"issueDate\": {\n      \"type\": \"string\",\n      \"description\": \"Date when the transport document has been issued\",\n      \"format\": \"date\"\n    },\n    \"shippedOnBoardDate\": {\n      \"type\": \"string\",\n      \"description\": \"Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.\",\n      \"format\": \"date\"\n    },\n    \"receivedForShipmentDate\": {\n      \"type\": \"string\",\n      \"description\": \"Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).\",\n      \"format\": \"date\"\n    },\n    \"numberOfCopies\": {\n      \"type\": \"integer\",\n      \"minimum\": -2147483648,\n      \"maximum\": 2147483647\n    },\n    \"numberOfOriginals\": {\n      \"type\": \"integer\",\n      \"minimum\": -2147483648,\n      \"maximum\": 2147483647\n    },\n    \"isElectronic\": {\n      \"type\": \"boolean\",\n      \"description\": \"An indicator whether the transport document is electronically transferred.\"\n    },\n    \"isToOrder\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates whether the transport document is issued `to order` or not\\n\"\n    },\n    \"carrierCode\": {\n      \"maxLength\": 4,\n      \"type\": \"string\",\n      \"description\": \"The code containing the SCAC and/or the SMDG code to specify the issuing carrier.  Details about the issuer can be given in the Document Parties entity using the party function code MS.\\n\"\n    },\n    \"carrierCodeListProvider\": {\n      \"type\": \"string\",\n      \"description\": \"The provider used for identifying the issuer Code\\n\",\n      \"enum\": [\n        \"SMDG\",\n        \"NMFTA\"\n      ]\n    },\n    \"issuingParty\": {\n      \"required\": [\n        \"partyContactDetails\"\n      ],\n      \"type\": \"object\",\n      \"description\": \"refers to a company or a legal entity.\",\n      \"properties\": {\n        \"partyName\": {\n          \"maxLength\": 100,\n          \"type\": \"string\",\n          \"description\": \"Name of the party.\"\n        },\n        \"taxReference1\": {\n          \"maxLength\": 20,\n          \"type\": \"string\",\n          \"description\": \"The identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n        },\n        \"taxReference2\": {\n          \"maxLength\": 20,\n          \"type\": \"string\",\n          \"description\": \"Optional second identifying number of the consignee or shipper (Individual or entity) used for tax purposes.\"\n        },\n        \"publicKey\": {\n          \"maxLength\": 500,\n          \"type\": \"string\",\n          \"description\": \"The public key used for a digital signature.\"\n        },\n        \"address\": {\n          \"type\": \"object\",\n          \"description\": \"An object for storing address related information\\n\",\n          \"properties\": {\n            \"name\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"Name of the address\"\n            },\n            \"street\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the street of the party's address.\"\n            },\n            \"streetNumber\": {\n              \"maxLength\": 50,\n              \"type\": \"string\",\n              \"description\": \"The number of the street of the party's address.\"\n            },\n            \"floor\": {\n              \"maxLength\": 50,\n              \"type\": \"string\",\n              \"description\": \"The floor of the party's street number.\"\n            },\n            \"postCode\": {\n              \"maxLength\": 50,\n              \"type\": \"string\",\n              \"description\": \"The post code of the party's address.\"\n            },\n            \"city\": {\n              \"maxLength\": 65,\n              \"type\": \"string\",\n              \"description\": \"The city name of the party's address.\"\n            },\n            \"stateRegion\": {\n              \"maxLength\": 65,\n              \"type\": \"string\",\n              \"description\": \"The state/region of the party's address.\"\n            },\n            \"country\": {\n              \"maxLength\": 75,\n              \"type\": \"string\",\n              \"description\": \"The country of the party's address.\"\n            }\n          }\n        },\n        \"partyContactDetails\": {\n          \"minItems\": 1,\n          \"type\": \"array\",\n          \"description\": \"A list of contact details - the list cannot be empty\\n\",\n          \"items\": {\n            \"required\": [\n              \"name\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"Contact information for a Party\\n\",\n            \"properties\": {\n              \"name\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"Name of the contact\"\n              },\n              \"phone\": {\n                \"maxLength\": 30,\n                \"type\": \"string\",\n                \"description\": \"Phone number for the contact\"\n              },\n              \"email\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"E-mail address for the contact\"\n              }\n            }\n          }\n        },\n        \"identifyingCodes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"required\": [\n              \"DCSAResponsibleAgencyCode\",\n              \"partyCode\"\n            ],\n            \"type\": \"object\",\n            \"properties\": {\n              \"DCSAResponsibleAgencyCode\": {\n                \"type\": \"string\",\n                \"description\": \"A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:\\n- ISO (International Standards Organization)\\n- UNECE (United Nations Economic Commission for Europe)\\n- LLOYD (Lloyd's register of shipping)\\n- BIC (Bureau International des Containeurs)\\n- IMO (International Maritime Organization)\\n- SCAC (Standard Carrier Alpha Code)\\n- ITIGG (International Transport Implementation Guidelines Group)\\n- ITU (International Telecommunication Union)\\n- SMDG (Shipplanning Message Development Group)\\n- EXIS (Exis Technologies Ltd.)\\n- FMC (Federal Maritime Commission)\\n- CBSA (Canada Border Services Agency)\\n- DCSA (Digital Container Shipping Association)\\n- ZZZ (Mutually defined)\\n\\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/codelistresponsibleagencycodes.csv).\\n\",\n                \"enum\": [\n                  \"ISO\",\n                  \"UNECE\",\n                  \"LLOYD\",\n                  \"BIC\",\n                  \"IMO\",\n                  \"SCAC\",\n                  \"ITIGG\",\n                  \"ITU\",\n                  \"SMDG\",\n                  \"EXIS\",\n                  \"FMC\",\n                  \"CBSA\",\n                  \"DCSA\",\n                  \"ZZZ\"\n                ]\n              },\n              \"partyCode\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"Code to identify the party as provided by the agency\\n\"\n              },\n              \"codeListName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the list, provided by the responsible agency\\n\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"numberOfRiderPages\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.\",\n      \"minimum\": -2147483648,\n      \"maximum\": 2147483647\n    },\n    \"termsAndConditions\": {\n      \"type\": \"string\",\n      \"description\": \"Carrier general terms and conditions for the booking.\\n\"\n    },\n    \"receiptTypeAtOrigin\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Indicates the type of service offered at Origin. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n      \"enum\": [\n        \"CY\",\n        \"SD\",\n        \"CFS\"\n      ]\n    },\n    \"deliveryTypeAtDestination\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Indicates the type of service offered at Destination. Options are defined in the Receipt/Delivery entity.\\n- CY (Container yard (incl. rail ramp))\\n- SD (Store Door)\\n- CFS (Container Freight Station)\\n\",\n      \"enum\": [\n        \"CY\",\n        \"SD\",\n        \"CFS\"\n      ]\n    },\n    \"cargoMovementTypeAtOrigin\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Refers to the shipment term at the loading of the cargo into the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n      \"enum\": [\n        \"FCL\",\n        \"LCL\",\n        \"BB\"\n      ]\n    },\n    \"cargoMovementTypeAtDestination\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"Refers to the shipment term at the unloading of the cargo out of the container. Options are defined in the Cargo Movement Type entity.\\n- FCL (Full Container Load)\\n- LCL (Less than Container Load)\\n- BB (Break Bulk)\\n\",\n      \"enum\": [\n        \"FCL\",\n        \"LCL\",\n        \"BB\"\n      ]\n    },\n    \"serviceContractReference\": {\n      \"maxLength\": 30,\n      \"type\": \"string\",\n      \"description\": \"Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.\"\n    },\n    \"documentStatus\": {\n      \"type\": \"string\",\n      \"description\": \"The status of the Bill of Lading. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- DRFT (Draft)\\n- PENA (Pending Approval)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- VOID (Void)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\n      \"enum\": [\n        \"RECE\",\n        \"PENU\",\n        \"DRFT\",\n        \"PENA\",\n        \"APPR\",\n        \"ISSU\",\n        \"SURR\",\n        \"VOID\"\n      ]\n    },\n    \"consignmentItems\": {\n      \"minItems\": 1,\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"HSCodes\",\n          \"cargoItems\",\n          \"descriptionOfGoods\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`\\n\",\n        \"properties\": {\n          \"carrierBookingReference\": {\n            \"maxLength\": 35,\n            \"type\": \"string\",\n            \"description\": \"A set of unique characters provided by carrier to identify a booking.\"\n          },\n          \"weight\": {\n            \"type\": \"number\",\n            \"description\": \"The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          },\n          \"volume\": {\n            \"type\": \"number\",\n            \"description\": \"Calculated by multiplying the width, height, and length of the packed cargo.\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          },\n          \"weightUnit\": {\n            \"type\": \"string\",\n            \"description\": \"The unit of measure which can be expressed in imperial or metric terms\",\n            \"enum\": [\n              \"KGM\",\n              \"LBR\"\n            ]\n          },\n          \"volumeUnit\": {\n            \"type\": \"string\",\n            \"description\": \"The unit of measure which can be expressed in either imperial or metric terms\\n- FTQ (Cubic meter)\\n- MTQ (Cubic foot)\\n\",\n            \"enum\": [\n              \"MTQ\",\n              \"FTQ\"\n            ]\n          },\n          \"descriptionOfGoods\": {\n            \"type\": \"string\",\n            \"description\": \"The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper.\"\n          },\n          \"HSCodes\": {\n            \"minItems\": 1,\n            \"items\": {\n              \"maxLength\": 10,\n              \"type\": \"string\"\n            }\n          },\n          \"cargoItems\": {\n            \"minItems\": 1,\n            \"type\": \"array\",\n            \"items\": {\n              \"required\": [\n                \"equipmentReference\",\n                \"weight\",\n                \"weightUnit\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.\",\n              \"properties\": {\n                \"cargoLineItems\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"required\": [\n                      \"cargoLineItemID\",\n                      \"shippingMarks\"\n                    ],\n                    \"type\": \"object\",\n                    \"description\": \"identifies the specific details of packages within a cargo item.\\n\",\n                    \"properties\": {\n                      \"cargoLineItemID\": {\n                        \"type\": \"string\",\n                        \"description\": \"Identifies the cargo line item (package) within the cargo. The cargo line item ID is provided by the shipper and is used to define the stuffing. Cargo line items belonging to the same cargo items are stuffed in the same container.\"\n                      },\n                      \"shippingMarks\": {\n                        \"type\": \"string\",\n                        \"description\": \"The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the shipper.\"\n                      }\n                    }\n                  }\n                },\n                \"equipmentReference\": {\n                  \"maxLength\": 15,\n                  \"type\": \"string\",\n                  \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n                },\n                \"weight\": {\n                  \"type\": \"number\",\n                  \"description\": \"The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).\",\n                  \"minimum\": -3.402823669209385e+38,\n                  \"maximum\": 3.402823669209385e+38\n                },\n                \"volume\": {\n                  \"type\": \"number\",\n                  \"description\": \"Calculated by multiplying the width, height, and length of the packed cargo.\",\n                  \"minimum\": -3.402823669209385e+38,\n                  \"maximum\": 3.402823669209385e+38\n                },\n                \"weightUnit\": {\n                  \"type\": \"string\",\n                  \"description\": \"The unit of measure which can be expressed in imperial or metric terms\",\n                  \"enum\": [\n                    \"KGM\",\n                    \"LBR\"\n                  ]\n                },\n                \"volumeUnit\": {\n                  \"type\": \"string\",\n                  \"description\": \"The unit of measure which can be expressed in either imperial or metric terms\\n- FTQ (Cubic meter)\\n- MTQ (Cubic foot)\\n\",\n                  \"enum\": [\n                    \"MTQ\",\n                    \"FTQ\"\n                  ]\n                }\n              }\n            }\n          },\n          \"references\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"required\": [\n                \"referenceType\",\n                \"referenceValue\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"references provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\\n\",\n              \"properties\": {\n                \"referenceType\": {\n                  \"type\": \"string\",\n                  \"description\": \"The reference type codes defined by DCSA.\\n- FF (Freight Forwarder's Reference)\\n- SI (Shipper's Reference)\\n- PO (Purchase Order Reference)\\n- CR (Customer's Reference)\\n- AAO (Consignee's Reference)\\n- ECR (Empty container release reference)\\n- CSI (Customer shipment ID)\\n- BPR (Booking party reference number)\\n- BID (Booking Request ID)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/referencetypes.csv\\\">GitHub</a>. Be aware that the list is a subset of the possible values.\\n\",\n                  \"enum\": [\n                    \"FF\",\n                    \"SI\",\n                    \"PO\",\n                    \"CR\",\n                    \"AAO\",\n                    \"ECR\",\n                    \"CSI\",\n                    \"BPR\",\n                    \"BID\"\n                  ]\n                },\n                \"referenceValue\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The actual value of the reference.\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"utilizedTransportEquipments\": {\n      \"minItems\": 1,\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"cargoGrossWeight\",\n          \"cargoGrossWeightUnit\",\n          \"equipment\",\n          \"isShipperOwned\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"Specifies the container (`equipment`), the total weight, the `seals` used and possible `reefer` settings\\n\",\n        \"properties\": {\n          \"equipment\": {\n            \"required\": [\n              \"equipmentReference\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' Dry Freight Container, but several different versions exist.\\n\",\n            \"properties\": {\n              \"equipmentReference\": {\n                \"maxLength\": 15,\n                \"type\": \"string\",\n                \"description\": \"The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\\nAccording to ISO 6346, a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit). If a container does not comply with ISO 6346, it is suggested to follow Recommendation #2 ÔÇ£Container with non-ISO identificationÔÇØ from SMDG.\\n\"\n              },\n              \"ISOEquipmentCode\": {\n                \"maxLength\": 4,\n                \"type\": \"string\",\n                \"description\": \"Unique code for the different equipment size/type used for transporting commodities. The code is a concatenation of ISO Equipment Size Code and ISO Equipment Type Code A and follows the ISO 6346 standard.\"\n              },\n              \"tareWeight\": {\n                \"type\": \"number\",\n                \"description\": \"The weight of an empty container (gross container weight).\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"weightUnit\": {\n                \"type\": \"string\",\n                \"description\": \"The unit of measure which can be expressed in imperial or metric terms\",\n                \"enum\": [\n                  \"KGM\",\n                  \"LBR\"\n                ]\n              }\n            }\n          },\n          \"cargoGrossWeightUnit\": {\n            \"type\": \"string\",\n            \"description\": \"The unit of measure which can be expressed in imperial or metric terms\",\n            \"enum\": [\n              \"KGM\",\n              \"LBR\"\n            ]\n          },\n          \"cargoGrossWeight\": {\n            \"type\": \"number\",\n            \"description\": \"The grand total weight of the cargo and weight per container(s) including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper. Excludes the tare weight of the container(s).\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          },\n          \"isShipperOwned\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicates whether the container is shipper owned (SOC).\"\n          },\n          \"activeReeferSettings\": {\n            \"type\": \"object\",\n            \"description\": \"specifies the settings for an active reefer container used to a shipment.\",\n            \"properties\": {\n              \"temperatureMin\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the minimum temperature setting on the container.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"temperatureMax\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the maximum temperature setting on the container.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"temperatureUnit\": {\n                \"type\": \"string\",\n                \"description\": \"Celsius (CEL) or Fahrenheit (FAH).\",\n                \"enum\": [\n                  \"CEL\",\n                  \"FAH\"\n                ]\n              },\n              \"humidityMin\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the minimum humidity setting on the container in percent.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"humidityMax\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the maximum humidity setting on the container in percent.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"ventilationMin\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the minimum ventilation setting on the container in MTQ/Hr.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              },\n              \"ventilationMax\": {\n                \"type\": \"number\",\n                \"description\": \"Indicates the maximum ventilation setting on the container in MTQ/Hr.\",\n                \"minimum\": -3.402823669209385e+38,\n                \"maximum\": 3.402823669209385e+38\n              }\n            }\n          },\n          \"seals\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"required\": [\n                \"sealNumber\",\n                \"sealType\"\n              ],\n              \"type\": \"object\",\n              \"description\": \"addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This seal is meant to stay on until the shipment equipment reaches its final destination.\",\n              \"properties\": {\n                \"sealNumber\": {\n                  \"maxLength\": 15,\n                  \"type\": \"string\",\n                  \"description\": \"Identifies a seal affixed to the container.\"\n                },\n                \"sealSource\": {\n                  \"type\": \"string\",\n                  \"description\": \"The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.\\n- CAR (Carrier)\\n- SHI (Shipper)\\n- PHY (Phytosanitary)\\n- VET (Veterinary)\\n- CUS (Customs)\\n\",\n                  \"enum\": [\n                    \"CAR\",\n                    \"SHI\",\n                    \"PHY\",\n                    \"VET\",\n                    \"CUS\"\n                  ]\n                },\n                \"sealType\": {\n                  \"type\": \"string\",\n                  \"description\": \"The type of seal. This attribute links to the Seal Type ID defined in the Seal Type reference data entity.\\n- KLP (Keyless padlock)\\n- BLT (Bolt)\\n- WIR (Wire)\\n\",\n                  \"enum\": [\n                    \"KLP\",\n                    \"BLT\",\n                    \"WIR\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"vesselName\": {\n      \"maxLength\": 35,\n      \"type\": \"string\",\n      \"description\": \"The name of the Vessel given by the Vessel Operator and registered with IMO.\\n\"\n    },\n    \"exportVoyageNumber\": {\n      \"maxLength\": 50,\n      \"type\": \"string\",\n      \"description\": \"The identifier of an export voyage. The vessel operator-specific identifier of the export Voyage. The result will only return schedules including the export Voyage Number\\n\"\n    },\n    \"declaredValue\": {\n      \"type\": \"number\",\n      \"description\": \"The value of the cargo that the shipper declares to avoid the carrier&apos;s limitation of liability and \\\"Ad Valorem\\\" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.\",\n      \"minimum\": -3.402823669209385e+38,\n      \"maximum\": 3.402823669209385e+38\n    },\n    \"declaredValueCurrency\": {\n      \"maxLength\": 3,\n      \"type\": \"string\",\n      \"description\": \"The currency used for the declared value, using the 3-character code defined by ISO 4217.\"\n    },\n    \"transports\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"plannedDepartureDate\",\n        \"plannedArrivalDate\",\n        \"portOfLoading\",\n        \"portOfDischarge\"\n      ],\n      \"plannedDepartureDate\": {\n        \"type\": \"string\",\n        \"description\": \"The planned date of departure.\\n\",\n        \"format\": \"date\"\n      },\n      \"plannedArrivalDate\": {\n        \"type\": \"string\",\n        \"description\": \"The planned date of arrival.\\n\",\n        \"format\": \"date\"\n      },\n      \"preCarriedBy\": {\n        \"type\": \"string\",\n        \"description\": \"The mode of transport as defined by DCSA.\\n\",\n        \"enum\": [\n          \"VESSEL\",\n          \"RAIL\",\n          \"TRUCK\",\n          \"BARGE\"\n        ]\n      },\n      \"placeOfReceipt\": {\n        \"anyOf\": [\n          {\n            \"required\": [\n              \"address\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using an `Address` object\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"address\": {\n                \"description\": \"Address related information\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"UNLocationCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"facilityCode\",\n              \"facilityCodeListProvider\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              },\n              \"facilityCode\": {\n                \"maxLength\": 6,\n                \"type\": \"string\",\n                \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n              },\n              \"facilityCodeListProvider\": {\n                \"type\": \"string\",\n                \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                \"enum\": [\n                  \"BIC\",\n                  \"SMDG\"\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"portOfLoading\": {\n        \"anyOf\": [\n          {\n            \"required\": [\n              \"address\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using an `Address` object\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"address\": {\n                \"description\": \"Address related information\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"UNLocationCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"facilityCode\",\n              \"facilityCodeListProvider\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              },\n              \"facilityCode\": {\n                \"maxLength\": 6,\n                \"type\": \"string\",\n                \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n              },\n              \"facilityCodeListProvider\": {\n                \"type\": \"string\",\n                \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                \"enum\": [\n                  \"BIC\",\n                  \"SMDG\"\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"portOfDischarge\": {\n        \"anyOf\": [\n          {\n            \"required\": [\n              \"address\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using an `Address` object\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"address\": {\n                \"description\": \"Address related information\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"UNLocationCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"facilityCode\",\n              \"facilityCodeListProvider\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              },\n              \"facilityCode\": {\n                \"maxLength\": 6,\n                \"type\": \"string\",\n                \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n              },\n              \"facilityCodeListProvider\": {\n                \"type\": \"string\",\n                \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                \"enum\": [\n                  \"BIC\",\n                  \"SMDG\"\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"placeOfDelivery\":{\n        \"anyOf\": [\n          {\n            \"required\": [\n              \"address\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using an `Address` object\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"address\": {\n                \"description\": \"Address related information\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"UNLocationCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"facilityCode\",\n              \"facilityCodeListProvider\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              },\n              \"facilityCode\": {\n                \"maxLength\": 6,\n                \"type\": \"string\",\n                \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n              },\n              \"facilityCodeListProvider\": {\n                \"type\": \"string\",\n                \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                \"enum\": [\n                  \"BIC\",\n                  \"SMDG\"\n                ]\n              }\n            }\n          }\n        ]\n      },\n      \"onwardsInlandRouting\": {\n        \"anyOf\": [\n          {\n            \"required\": [\n              \"address\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using an `Address` object\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"address\": {\n                \"description\": \"Address related information\",\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"Name of the address\"\n                  },\n                  \"street\": {\n                    \"maxLength\": 100,\n                    \"type\": \"string\",\n                    \"description\": \"The name of the street of the party's address.\"\n                  },\n                  \"streetNumber\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The number of the street of the party's address.\"\n                  },\n                  \"floor\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The floor of the party's street number.\"\n                  },\n                  \"postCode\": {\n                    \"maxLength\": 50,\n                    \"type\": \"string\",\n                    \"description\": \"The post code of the party's address.\"\n                  },\n                  \"city\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The city name of the party's address.\"\n                  },\n                  \"stateRegion\": {\n                    \"maxLength\": 65,\n                    \"type\": \"string\",\n                    \"description\": \"The state/region of the party's address.\"\n                  },\n                  \"country\": {\n                    \"maxLength\": 75,\n                    \"type\": \"string\",\n                    \"description\": \"The country of the party's address.\"\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"UNLocationCode\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              }\n            }\n          },\n          {\n            \"required\": [\n              \"facilityCode\",\n              \"facilityCodeListProvider\"\n            ],\n            \"type\": \"object\",\n            \"description\": \"An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.\\n\",\n            \"properties\": {\n              \"locationName\": {\n                \"maxLength\": 100,\n                \"type\": \"string\",\n                \"description\": \"The name of the location.\"\n              },\n              \"UNLocationCode\": {\n                \"maxLength\": 5,\n                \"type\": \"string\",\n                \"description\": \"The UN Location code specifying where the place is located.\"\n              },\n              \"facilityCode\": {\n                \"maxLength\": 6,\n                \"type\": \"string\",\n                \"description\": \"The code used for identifying the specific facility. This code does <b>not</b> include the UN Location Code.\\n\"\n              },\n              \"facilityCodeListProvider\": {\n                \"type\": \"string\",\n                \"description\": \"The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`\\n- BIC (Requires a UN Location Code)\\n- SMDG (Requires a UN Location Code)\\n\",\n                \"enum\": [\n                  \"BIC\",\n                  \"SMDG\"\n                ]\n              }\n            }\n          }\n        ]\n      }\n    },\n    \"invoicePayableAt\": {\n      \"anyOf\": [\n        {\n          \"required\": [\n            \"address\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"address\": {\n              \"description\": \"Address related information\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"Name of the address\"\n                },\n                \"street\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the street of the party's address.\"\n                },\n                \"streetNumber\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The number of the street of the party's address.\"\n                },\n                \"floor\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The floor of the party's street number.\"\n                },\n                \"postCode\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The post code of the party's address.\"\n                },\n                \"city\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The city name of the party's address.\"\n                },\n                \"stateRegion\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The state/region of the party's address.\"\n                },\n                \"country\": {\n                  \"maxLength\": 75,\n                  \"type\": \"string\",\n                  \"description\": \"The country of the party's address.\"\n                }\n              }\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"UNLocationCode\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            }\n          }\n        }\n      ],\n      \"description\": \"General purpose object to capture `Invoice Payable At` location. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\"\n    },\n    \"placeOfIssue\": {\n      \"anyOf\": [\n        {\n          \"required\": [\n            \"address\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using an `Address` object\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"address\": {\n              \"description\": \"Address related information\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"name\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"Name of the address\"\n                },\n                \"street\": {\n                  \"maxLength\": 100,\n                  \"type\": \"string\",\n                  \"description\": \"The name of the street of the party's address.\"\n                },\n                \"streetNumber\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The number of the street of the party's address.\"\n                },\n                \"floor\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The floor of the party's street number.\"\n                },\n                \"postCode\": {\n                  \"maxLength\": 50,\n                  \"type\": \"string\",\n                  \"description\": \"The post code of the party's address.\"\n                },\n                \"city\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The city name of the party's address.\"\n                },\n                \"stateRegion\": {\n                  \"maxLength\": 65,\n                  \"type\": \"string\",\n                  \"description\": \"The state/region of the party's address.\"\n                },\n                \"country\": {\n                  \"maxLength\": 75,\n                  \"type\": \"string\",\n                  \"description\": \"The country of the party's address.\"\n                }\n              }\n            }\n          }\n        },\n        {\n          \"required\": [\n            \"UNLocationCode\"\n          ],\n          \"type\": \"object\",\n          \"description\": \"An interface used to express a location using a `Un Location Code`\\n\",\n          \"properties\": {\n            \"locationName\": {\n              \"maxLength\": 100,\n              \"type\": \"string\",\n              \"description\": \"The name of the location.\"\n            },\n            \"UNLocationCode\": {\n              \"maxLength\": 5,\n              \"type\": \"string\",\n              \"description\": \"The UN Location code specifying where the place is located.\"\n            }\n          }\n        }\n      ],\n      \"description\": \"General purpose object to capture where the original Transport Document (`Bill of Lading`) will be issued. The location can be specified in **any** of the following ways: `UN Location Code` and/or an `Address`.\\n\"\n    },\n    \"charges\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"required\": [\n          \"calculationBasis\",\n          \"chargeName\",\n          \"currencyAmount\",\n          \"currencyCode\",\n          \"paymentTermCode\",\n          \"quantity\",\n          \"unitPrice\"\n        ],\n        \"type\": \"object\",\n        \"description\": \"addresses the monetary value of freight and other service charges for a transport document.\\n\",\n        \"properties\": {\n          \"chargeName\": {\n            \"maxLength\": 20,\n            \"type\": \"string\",\n            \"description\": \"Free text field describing the charge type to apply\\n\"\n          },\n          \"currencyAmount\": {\n            \"type\": \"number\",\n            \"description\": \"The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          },\n          \"currencyCode\": {\n            \"maxLength\": 3,\n            \"type\": \"string\",\n            \"description\": \"The currency for the charge, using a 3-character code (ISO 4217).\"\n          },\n          \"paymentTermCode\": {\n            \"type\": \"string\",\n            \"description\": \"Indicates whether freight & charges are due for payment before the shipment is effected, practically before the transport document is released to shipper (Prepaid) or before the shipment is finalized meaning cargo released to consignee (Collect)\\n- PRE (Prepaid)\\n- COL (Collect)\\n\",\n            \"enum\": [\n              \"PRE\",\n              \"COL\"\n            ]\n          },\n          \"calculationBasis\": {\n            \"maxLength\": 50,\n            \"type\": \"string\",\n            \"description\": \"The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.\"\n          },\n          \"unitPrice\": {\n            \"type\": \"number\",\n            \"description\": \"The unit price of this charge item in the currency of the charge.\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          },\n          \"quantity\": {\n            \"type\": \"number\",\n            \"description\": \"The amount of unit for this charge item.\",\n            \"minimum\": -3.402823669209385e+38,\n            \"maximum\": 3.402823669209385e+38\n          }\n        }\n      }\n    },\n    \"carrierClauses\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"description\": \"comprises clauses, added by the carrier to the Transport Document, which are subject to local rules/guidelines or certain mandatory information required to be shared with the customer. Usually printed below the cargo description.\\n\",\n        \"properties\": {\n          \"clauseContent\": {\n            \"type\": \"string\",\n            \"description\": \"The content of the clause.\"\n          }\n        }\n      }\n    }\n  }\n}\n",
			"type": "string"
		},
		{
			"key": "TRANSPORT_DOCUMENT_SUMMARY_SCHEMA",
			"value": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"required\": [\n      \"documentStatus\",\n      \"transportDocumentCreatedDateTime\",\n      \"transportDocumentReference\",\n      \"shippingInstructionReference\",\n      \"transportDocumentUpdatedDateTime\"\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n      \"transportDocumentReference\": {\n        \"maxLength\": 100,\n        \"type\": \"string\",\n        \"description\": \"The identifier for a shipping instruction provided by the carrier for system purposes.\\n\"\n      },\n      \"shippingInstructionReference\": {\n        \"maxLength\": 100,\n        \"type\": \"string\",\n        \"description\": \"The identifier for a shipping instruction provided by the carrier for system purposes.\\n\"\n      },\n      \"documentStatus\": {\n        \"type\": \"string\",\n        \"description\": \"The status of the Bill of Lading. Possible values are:\\n- RECE (Received)\\n- PENU (Pending Update)\\n- DRFT (Draft)\\n- PENA (Pending Approval)\\n- APPR (Approved)\\n- ISSU (Issued)\\n- SURR (Surrendered)\\n- VOID (Void)\\n\\nMore details can be found on <a href=\\\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv\\\">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.\\n\",\n        \"enum\": [\n          \"RECE\",\n          \"PENU\",\n          \"DRFT\",\n          \"PENA\",\n          \"APPR\",\n          \"ISSU\",\n          \"SURR\",\n          \"VOID\"\n        ]\n      },\n      \"transportDocumentCreatedDateTime\": {\n        \"type\": \"string\",\n        \"description\": \"Date and time when the ShippingInstruction was created\\n\",\n        \"format\": \"date-time\"\n      },\n      \"transportDocumentUpdatedDateTime\": {\n        \"type\": \"string\",\n        \"description\": \"Date and time when the ShippingInstruction was updated\\n\",\n        \"format\": \"date-time\"\n      },\n      \"issueDate\": {\n        \"type\": \"string\",\n        \"format\": \"date\"\n      },\n      \"shippedOnBoardDate\": {\n        \"type\": \"string\",\n        \"format\": \"date\"\n      },\n      \"receivedForShipmentDate\": {\n        \"type\": \"string\",\n        \"format\": \"date\"\n      },\n      \"numberOfRiderPages\": {\n        \"type\": \"integer\",\n        \"minimum\": 0,\n        \"maximum\": 2147483647\n      },\n      \"carrierCode\": {\n        \"type\": \"string\",\n        \"maxLength\": 4\n      },\n      \"carrierCodeListProvider\": {\n        \"type\": \"string\",\n        \"enum\": [\n          \"SMDG\",\n          \"NMFTA\"\n        ]\n      },\n      \"carrierBookingReferences\": {\n        \"type\": \"array\",\n        \"description\": \"A list of all `carrierBookingReferences` used. The `carrierBookingReferences` are sourced from the `CargoItems` or the root object of the SI.\\n\",\n        \"items\": {\n          \"maxLength\": 35,\n          \"type\": \"string\",\n          \"description\": \"A set of unique characters provided by carrier to identify a booking.\"\n        }\n      }\n    }\n  }\n}\n",
			"type": "default"
		},
		{
			"key": "CARRIER_BOOKING_REFERENCE",
			"value": ""
		},
		{
			"key": "TRANSPORT_DOCUMENT_REFERENCE",
			"value": ""
		},
		{
			"key": "CARRIER_BOOKING_REQUEST_REFERENCE",
			"value": ""
		},
		{
			"key": "POST_BODY",
			"value": ""
		},
		{
			"key": "SHIPPING_INSTRUCTION_REFERENCE",
			"value": ""
		}
	]
}